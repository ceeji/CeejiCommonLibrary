<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CeejiCommonLibaray</name>
    </assembly>
    <members>
        <member name="T:Ceeji.AppContext">
            <summary>
            与运行环境有关的一些数据的静态方法。
            </summary>
        </member>
        <member name="M:Ceeji.AppContext.Restart(System.Int32)">
            <summary>
            重新启动当前文件。如果等待时间大于 0，则该文件在等待期间并不会被占用，可以被更新。
            </summary>
        </member>
        <member name="M:Ceeji.AppContext.GetTempFileName(System.String)">
            <summary>
            创建临时文件，此文件拥有指定的文件扩展名，并保证不和其他磁盘文件冲突。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.AppContext.HasAnotherIntance(System.String)">
            <summary>
            使用特定的 ID 检测是否具有相同 ID 的程序正在运行。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Ceeji.AppContext.BasePath">
            <summary>
            获取当前程序的运行路径。此路径以 \ 结尾。
            </summary>
        </member>
        <member name="P:Ceeji.AppContext.CurrentExecutingFileName">
            <summary>
            获取当前正在执行的【可执行文件】的文件名。
            </summary>
        </member>
        <member name="T:Ceeji.Configuration">
            <summary>
            用于载入、保存、读取或修改配置的类。配置可以容纳所有可以被序列化的类型，也支持配置的嵌套存储。
            </summary>
        </member>
        <member name="M:Ceeji.Configuration.#ctor">
            <summary>
            创建 Ceeji.Testing.Configuration.TestingConfiguration 的新实例。
            </summary>
        </member>
        <member name="M:Ceeji.Configuration.#ctor(System.Collections.Generic.List{Ceeji.ConfigItemPair{System.String,System.Object}})">
            <summary>
            创建 Ceeji.Testing.Configuration.TestingConfiguration 的新实例。
            </summary>
            <param name="source">要从中复制数据的 System.Collections.Generic.IDictionary&lt;TKey, TValue&gt;。 </param>
        </member>
        <member name="M:Ceeji.Configuration.LoadFromXMLFile(System.String,System.Text.Encoding)">
            <summary>
            从文件中加载配置。
            </summary>
            <param name="filename"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Configuration.LoadFromXMLText(System.String)">
            <summary>
            从文件中加载配置。
            </summary>
            <param name="filename"></param>
            <param name="encode"></param>
            <returns></returns>
            <exception cref="T:System.TypeLoadException">当特定的类型无法加载时导致的反序列化失败。</exception>
        </member>
        <member name="M:Ceeji.Configuration.SaveToXML(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            序列化配置到文本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ceeji.Configuration.Item(System.String)">
            <summary>
            返回或设置指定 key 的元素。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Ceeji.ConfigItemPair`2">
            <summary>
            代表配置项。
            </summary>
            <typeparam name="K">键的类型。</typeparam>
            <typeparam name="V">值的类型。</typeparam>
        </member>
        <member name="T:Ceeji.Data.BinaryPackage.CPKNode">
            <summary>
            代表 CPK 数据格式中的一个节点。
            </summary>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKNode.#ctor(System.String,Ceeji.Data.BinaryPackage.CPKValue)">
            <summary>
            创建 CPK 节点的新实例。
            </summary>
            <param name="name">节点的名称，此名称不能在同一层次中重复。</param>
            <param name="value">节点的值。</param>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKNode.#ctor(System.String,System.Object)">
            <summary>
            创建 CPK 节点的新实例。
            </summary>
            <param name="name">节点的名称，此名称不能在同一层次中重复。</param>
            <param name="value">节点的值。</param>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKNode.Get``1">
            <summary>
            获取节点的值。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKNode.SerializeToBinary">
            <summary>
            序列化 CPK 节点到二进制数据中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKNode.SerializeToStream(System.IO.Stream)">
            <summary>
            序列化 CPK 节点到流中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKNode.DeserializeFromStream(System.IO.Stream)">
            <summary>
            从流中反序列化 CPK 节点。
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKNode.GetEnumerator">
            <summary>
            返回子节点的枚举数。只在 List 和 Array 类型的元素中有效。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKNode.Name">
            <summary>
            返回或设置 CPK 节点的名称。
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKNode.Value">
            <summary>
            返回或设置 CPK 节点的值。
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKNode.Item(System.String)">
            <summary>
            获取或设置节点的子元素。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKNode.SerializedLength">
            <summary>
            返回序列化 CPK 节点到流中的长度。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKNode.Type">
            <summary>
            返回此 CPKNode 的类型。
            </summary>
        </member>
        <member name="T:Ceeji.Data.BinaryPackage.CPKPackage">
            <summary>
            代表从流中存取高性能二进制包（CeejiBinaryPackage，*.CPK）格式的对象和方法。此类所构建的高性能二进制包是在内存中全额存储的。
            </summary>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKPackage.#ctor(System.String,Ceeji.Data.BinaryPackage.CPKFlags)">
            <summary>
            创建一个新的高性能二进制包（CeejiBinaryPackage，*.CPK）格式的数据集。
            </summary>
            <param name="contentType">正文类型，可以随便指定，格式规范为 [软件名].[子类型].[[子类型]]，例如 MediaPlayer.UserSettings，Bzbx.Settings.Local。此类型用于区分不同格式的 CPK 数据包。打开 CPK 包时，系统会验证此格式。</param>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKPackage.#ctor(System.Byte[],System.String)">
            <summary>
            从指定的二进制数组中加载高性能二进制包（CeejiBinaryPackage，*.CPK 格式）的数据集。
            </summary>
            <param name="data">要从中读取的二进制数组。</param>
            <param name="expectedContentType">正文类型的期待值，如果不是该值，会抛出异常。</param>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKPackage.#ctor(System.IO.Stream,System.String)">
            <summary>
            从指定的流中加载高性能二进制包（CeejiBinaryPackage，*.CPK 格式）的数据集。
            </summary>
            <param name="stream">要从中读取的流。</param>
            <param name="expectedContentType">正文类型的期待值，如果不是该值，会抛出异常。</param>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKPackage.WriteToStream(System.IO.Stream)">
            <summary>
            将包的内容写入指定的流。
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKPackage.FormatVersion">
            <summary>
            获取当前 CPK 包的版本号。
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKPackage.ContentType">
            <summary>
            返回或设置此二进制包（BinaryPackage）的正文类型。正文类型必须定义，以便确认文件中存储内容的解析方式。不同内容的 CPK 包，应有不同的正文类型。
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKPackage.HashIncluded">
            <summary>
            标示此 CPK 数据中包括对整个 CPK 文件的哈希签名数据，可用于防止文件在无意中被用户修改（不能用于防止篡改，因为哈希值也可以被修改），但此签名不包括文件头。
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKPackage.PackageGuid">
            <summary>
            返回包的 Guid 值（如果有）。
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKPackage.Nodes">
            <summary>
            返回 CPK 包内的所有节点的集合。
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKPackage.Item(System.String)">
            <summary>
            返回或设置指定名称的节点的值。
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKPackage.Flags">
            <summary>
            返回或设置 CPK 文件的标记。
            </summary>
        </member>
        <member name="T:Ceeji.Data.BinaryPackage.CPKFlags">
            <summary>
            指定 CPK 数据可能拥有的一些属性标记。
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKFlags.None">
            <summary>
            无标记
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKFlags.HashIncluded">
            <summary>
            标示此 CPK 数据中包括对整个 CPK 文件的哈希签名数据，可用于防止文件在无意中被用户修改（不能用于防止篡改，因为哈希值也可以被修改），但此签名不包括文件头。
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKFlags.GuidIncluded">
            <summary>
            标示 CPK 包含一个全球唯一标识符（Guid），用于跟踪相同文件的编辑
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKFlags.LZ4Compressed">
            <summary>
            标志 CPK 被 LZ4 算法压缩，该算法的特点是极其快速、压缩率低、解压快速
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKFlags.LZ4HCCompressed">
            <summary>
            标志 CPK 被 LZ4HC 算法压缩，该算法的特点是速度慢、压缩率中等、解压快速
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKFlags.DeflateCompressed">
            <summary>
            标志 CPK 被 Deflate 算法压缩，该算法的特点是速度慢、压缩率较好、解压中速，且具有 GZip 头的校验功能（暂不支持请勿使用）
            </summary>
        </member>
        <member name="T:Ceeji.Data.BinaryPackage.CPKValueType">
            <summary>
            代表 CPK 节点的类型标记。
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.None">
            <summary>
            无标记
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.Binary">
            <summary>
            代表二进制数据
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.String">
            <summary>
            代表文本数据
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.EncodingUTF8">
            <summary>
            代表 UTF-8 格式编码的数据
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.EncodingGB2312">
            <summary>
            代表 GB2312 格式编码的数据
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.XmlDocument">
            <summary>
            代表 XML 格式数据
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.JSON">
            <summary>
            代表 JSON 格式数据
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.Char">
            <summary>
            16 位 UTF-16 字符
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.Byte">
            <summary>
            8 位无符号整数
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.Int16">
            <summary>
            16 位无符号整数
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.UInt16">
            <summary>
            16 位无符号整数
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.Int32">
            <summary>
            32 位无符号整数
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.UInt32">
            <summary>
            32 位无符号整数
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.Int64">
            <summary>
            64 位无符号整数
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.UInt64">
            <summary>
            64 位无符号整数
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.Decimal">
            <summary>
            货币类型
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.DateTime">
            <summary>
            代表一个日期时间
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.Guid">
            <summary>
            代表 Guid 类型数据
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.Boolean">
            <summary>
            代表 Bool 类型数据
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.HashIncluded">
            <summary>
            （保留，暂不支持）代表此节点将进行数据完整性校验，并存储数据摘要
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.List">
            <summary>
            代表 列表（集合）类型，其中可以存储任意数量的节点，每个节点都有自己的名字。
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.Array">
            <summary>
            代表数组类型，其中存储的节点类型都是相同的，每个节点只能通过索引（下标)来访问。
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.CompressedVeryHigh">
            <summary>
            代表超高压缩类型，其中存储的内容尽可能减少存储空间。（暂不支持）
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.CompressedHighDecompressedFast">
            <summary>
            代表高压缩类型，其中存储的内容尽可能减少存储空间，同时要求解压迅速。（暂不支持）
            </summary>
        </member>
        <member name="F:Ceeji.Data.BinaryPackage.CPKValueType.CompressedLow">
            <summary>
            代表低压缩类型，其中存储的内容减少存储空间，但要尽量不影响使用速度。（暂不支持）
            </summary>
        </member>
        <member name="T:Ceeji.Data.BinaryPackage.CPKValue">
            <summary>
            代表 CPK 高性能二进制包中存储的值。
            </summary>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKValue.#ctor(System.Object)">
            <summary>
            创建 CPK 节点的新实例。
            </summary>
            <param name="value">节点的值。</param>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKValue.#ctor(Ceeji.Data.BinaryPackage.CPKValueType)">
            <summary>
            创建 CPK 节点的新实例。
            </summary>
            <param name="type">节点的类型，只能为 None，List 或 Array。</param>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKValue.Get``1">
            <summary>
            获取节点的值。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKValue.Get``1(``0)">
            <summary>
            获取节点的值，允许指定默认值，当节点类型为 None 时返回默认值。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKValue.SerializeToBinary">
            <summary>
            序列化 CPK 值到二进制数据中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKValue.SerializeToStream(System.IO.Stream)">
            <summary>
            序列化 CPK 节点到流中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKValue.getRawValueLength">
            <summary>
            获取数据的原始值的长度。
            </summary>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKValue.WriteRawValueToStream(System.IO.Stream)">
            <summary>
            获取数据的原始值。
            </summary>
        </member>
        <member name="M:Ceeji.Data.BinaryPackage.CPKValue.GetEnumerator">
            <summary>
            返回子节点的枚举数。只在 List 和 Array 类型的元素中有效。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKValue.Value">
            <summary>
            返回或设置此 CPKValue 的值。对于一般元素，返回对应的 .NET 类型。对于数组，使用 IEnumerable&lt;CPKValue&gt; 类型。对于列表，使用 IEnumerable&lt;CPKNode&gt; 类型。
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKValue.Item(System.String)">
            <summary>
            获取或设置节点的子元素的值。
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKValue.Item(System.Int32)">
            <summary>
            获取或设置节点的数组元素的值。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKValue.Nodes">
            <summary>
            返回 CPK 节点内的所有子节点的集合。只有 List 类型的节点才可以使用。（Array 类型的节点，请使用 Items 访问其子节点）
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKValue.Items">
            <summary>
            返回 CPK 节点内的所有数组元素的集合。只有 Array 类型的节点才可以使用。（List 类型的节点，请使用 Nodes 访问其子节点）
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKValue.RawValue">
            <summary>
            获取数据的原始值。
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKValue.SerializedLength">
            <summary>
            获取数据的原始值的长度。
            </summary>
        </member>
        <member name="P:Ceeji.Data.BinaryPackage.CPKValue.Type">
            <summary>
            获取节点的类型。
            </summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Codec.MEMORY_USAGE">
            <summary>
            Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.)
            Increasing memory usage improves compression ratio
            Reduced memory usage can improve speed, due to cache effect
            Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache
            </summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Codec.NOTCOMPRESSIBLE_DETECTIONLEVEL">
            <summary>
            Decreasing this value will make the algorithm skip faster data segments considered "incompressible"
            This may decrease compression ratio dramatically, but will be faster on incompressible data
            Increasing this value will make the algorithm search more before declaring a segment "incompressible"
            This could improve compression a bit, but will be slower on incompressible data
            The default value (6) is recommended
            </summary>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Gets maximum the length of the output.</summary>
            <param name="inputLength">Length of the input.</param>
            <returns>Maximum number of bytes needed for compressed buffer.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.BlockCopy(System.Byte*,System.Byte*,System.Int32)">
            <summary>Copies block of memory.</summary>
            <param name="src">The source.</param>
            <param name="dst">The destination.</param>
            <param name="len">The length (in bytes).</param>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.BlockFill(System.Byte*,System.Int32,System.Byte)">
            <summary>Copies block of memory.</summary>
            <param name="dst">The destination.</param>
            <param name="len">The length (in bytes).</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Encode32(System.Byte*,System.Byte*,System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Encode32(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Encode32(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Decode32(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Decode32(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Decode32(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Encode64(System.Byte*,System.Byte*,System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Encode64(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Compressed buffer.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Decode64(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>Decode64s the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Decode64(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Decode64s the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Decompressed buffer.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Encode32HC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Encode32HC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Encode64HC(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.EncodeHC(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Codec.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input using HC codec.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
        </member>
        <member name="T:Ceeji.Data.Codec.LZ4.LZ4Stream">
            <summary>Block compression stream. Allows to use LZ4 for stream compression.</summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Stream._innerStream">
            <summary>The inner stream.</summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Stream._compressionMode">
            <summary>The compression mode.</summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Stream._highCompression">
            <summary>The high compression flag (compression only).</summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Stream._blockSize">
            <summary>The block size (compression only).</summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Stream._buffer">
            <summary>The buffer.</summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Stream._bufferLength">
            <summary>The buffer length (can be different then _buffer.Length).</summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Stream._bufferOffset">
            <summary>The offset in a buffer.</summary>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Ceeji.Data.Codec.LZ4.LZ4Stream"/> class.</summary>
            <param name="innerStream">The inner stream.</param>
            <param name="compressionMode">The compression mode.</param>
            <param name="highCompression">if set to <c>true</c> [high compression].</param>
            <param name="blockSize">Size of the block.</param>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.NotSupported(System.String)">
            <summary>Returns NotSupportedException.</summary>
            <param name="operationName">Name of the operation.</param>
            <returns>NotSupportedException</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.EndOfStream">
            <summary>Returns EndOfStreamException.</summary>
            <returns>EndOfStreamException</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.TryReadVarInt(System.UInt64@)">
            <summary>Tries to read variable length int.</summary>
            <param name="result">The result.</param>
            <returns><c>true</c> if integer has been read, <c>false</c> if end of stream has been
            encountered. If end of stream has been encoutered in the middle of value 
            <see cref="T:System.IO.EndOfStreamException"/> is thrown.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.ReadVarInt">
            <summary>Reads the variable length int. Work with assumption that value is in the stream
            and throws exception if it isn't. If you want to check if value is in the stream
            use <see cref="M:Ceeji.Data.Codec.LZ4.LZ4Stream.TryReadVarInt(System.UInt64@)"/> instead.</summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.ReadBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads the block of bytes. 
            Contrary to <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> does not read partial data if possible. 
            If there is no data (yet) it waits.</summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.WriteVarInt(System.UInt64)">
            <summary>Writes the variable length integer.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.FlushCurrentChunk">
            <summary>Flushes current chunk.</summary>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.AcquireNextChunk">
            <summary>Reads the next chunk from stream.</summary>
            <returns><c>true</c> if next has been read, or <c>false</c> if it is legitimate end of file.
            Throws <see cref="T:System.IO.EndOfStreamException"/> if end of stream was unexpected.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.Flush">
            <summary>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.ReadByte">
            <summary>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>When overridden in a derived class, sets the position within the current stream.</summary>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.SetLength(System.Int64)">
            <summary>When overridden in a derived class, sets the length of the current stream.</summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.WriteByte(System.Byte)">
            <summary>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</summary>
            <param name="value">The byte to write to the stream.</param>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Ceeji.Data.Codec.LZ4.LZ4Stream.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Ceeji.Data.Codec.LZ4.LZ4Stream.CanRead">
            <summary>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Ceeji.Data.Codec.LZ4.LZ4Stream.CanSeek">
            <summary>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</summary>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:Ceeji.Data.Codec.LZ4.LZ4Stream.CanWrite">
            <summary>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:Ceeji.Data.Codec.LZ4.LZ4Stream.Length">
            <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Ceeji.Data.Codec.LZ4.LZ4Stream.Position">
            <summary>When overridden in a derived class, gets or sets the position within the current stream.</summary>
            <returns>The current position within the stream.</returns>
        </member>
        <member name="T:Ceeji.Data.Codec.LZ4.LZ4Stream.ChunkFlags">
            <summary>
            Flags of a chunk. Please note, this 
            </summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Stream.ChunkFlags.None">
            <summary>None.</summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Stream.ChunkFlags.Compressed">
            <summary>Set if chunk is compressed.</summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Stream.ChunkFlags.HighCompression">
            <summary>Set if high compression has been selected (does not affect decoder, 
            but might be useful when rewriting)</summary>
        </member>
        <member name="F:Ceeji.Data.Codec.LZ4.LZ4Stream.ChunkFlags.Passes">
            <summary>3 bits for number of passes. Currently only 1 pass (value 0) 
            is supported.</summary>
        </member>
        <member name="T:Ceeji.Data.CompressionAlgorithm">
            <summary>
            代表一种压缩算法。
            </summary>
        </member>
        <member name="M:Ceeji.Data.CompressionAlgorithm.CompressBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <param name="outputBuffer">将转换写入的输出。</param>
            <param name="outputOffset">输出字节数组中的偏移量，从该位置开始写入数据。</param>
            <returns>计算所得的转换的字节数。</returns>
        </member>
        <member name="M:Ceeji.Data.CompressionAlgorithm.CompressFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <returns>计算所得的转换。</returns>
        </member>
        <member name="M:Ceeji.Data.CompressionAlgorithm.DecompressBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <param name="outputBuffer">将转换写入的输出。</param>
            <param name="outputOffset">输出字节数组中的偏移量，从该位置开始写入数据。</param>
            <returns>计算所得的转换的字节数。</returns>
        </member>
        <member name="M:Ceeji.Data.CompressionAlgorithm.DecompressFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <returns>计算所得的转换。</returns>
        </member>
        <member name="T:Ceeji.Data.Compressor">
            <summary>
            提供对流的压缩和解压缩的支持。
            </summary>
        </member>
        <member name="M:Ceeji.Data.Compressor.Compression(Ceeji.Data.CompressionAlgorithm,System.IO.Compression.CompressionMode,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            压缩数据流。
            </summary>
            <param name="algorithm">要使用的压缩算法。CompressionAlgorithms 类中提供了常用的压缩算法。</param>
            <param name="inputBuffer">指定输入缓冲区。</param>
            <param name="inputOffset">指定输入缓冲区的开始位置。</param>
            <param name="inputCount">指定输入缓冲区的长度。</param>
            <param name="outputBuffer">指定输出缓冲区。</param>
            <param name="outputOffset">指定输出缓冲区的开始位置。</param>
            <returns>返回压缩后的字节数。</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Ceeji.Data.Compressor.Compression(Ceeji.Data.CompressionAlgorithm,System.IO.Compression.CompressionMode,System.Byte[],System.Int32,System.Int32)">
            <summary>
            压缩数据流。
            </summary>
            <param name="algorithm">要使用的压缩算法。CompressionAlgorithms 类中提供了常用的压缩算法。</param>
            <param name="inputBuffer">指定输入缓冲区。</param>
            <param name="inputOffset">指定输入缓冲区的开始位置。</param>
            <param name="inputCount">指定输入缓冲区的长度。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Ceeji.Data.Compressor.Compression(Ceeji.Data.CompressionAlgorithm,System.IO.Compression.CompressionMode,System.Byte[])">
            <summary>
            压缩数据流。
            </summary>
            <param name="algorithm">要使用的压缩算法。CompressionAlgorithms 类中提供了常用的压缩算法。</param>
            <param name="inputBuffer">指定输入缓冲区。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Ceeji.Data.Compressor.Compression(Ceeji.Data.CompressionAlgorithm,System.IO.Compression.CompressionMode,System.IO.Stream,System.Int32,System.IO.Stream)">
            <summary>
            压缩数据流。
            </summary>
            <param name="algorithm">要使用的压缩算法。CompressionAlgorithms 类中提供了常用的压缩算法。</param>
            <param name="inputStream">指定输入流。</param>
            <param name="inputCount">输入流的长度，或 -1 以代表读至流的末尾。</param>
            <param name="outputStream">指定输出流。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Ceeji.Data.Compressor.Compression(Ceeji.Data.CompressionAlgorithm,System.IO.Compression.CompressionMode,System.IO.Stream,System.IO.Stream)">
            <summary>
            压缩数据流。
            </summary>
            <param name="algorithm">要使用的压缩算法。CompressionAlgorithms 类中提供了常用的压缩算法。</param>
            <param name="inputStream">指定输入流。</param>
            <param name="outputStream">指定输出流。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Ceeji.Data.Compressor.Compression(Ceeji.Data.CompressionAlgorithm,System.IO.Compression.CompressionMode,System.IO.Stream)">
            <summary>
            压缩数据流。
            </summary>
            <param name="algorithm">要使用的压缩算法。CompressionAlgorithms 类中提供了常用的压缩算法。</param>
            <param name="inputStream">指定输入流。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Ceeji.Data.Compressor.ChunkSize">
            <summary>
            获取或设置压缩、解压缩时使用的每块的最大大小。
            </summary>
        </member>
        <member name="T:Ceeji.Data.CompressionAlgorithms">
            <summary>
            提供常用的压缩算法。
            </summary>
        </member>
        <member name="F:Ceeji.Data.CompressionAlgorithms.GZip">
            <summary>
            获取 GZip 压缩算法，它是 Deflate 算法增加 CRC32 校验等文件头的文件格式。
            </summary>
        </member>
        <member name="F:Ceeji.Data.CompressionAlgorithms.Deflate">
            <summary>
            获取 Deflate 压缩算法，它的特点是压缩率很高，解压、压缩较慢。
            </summary>
        </member>
        <member name="F:Ceeji.Data.CompressionAlgorithms.LZ4">
            <summary>
            获取 LZ4 压缩算法，它的特点是压缩率很低，解压、压缩极快。
            </summary>
        </member>
        <member name="F:Ceeji.Data.CompressionAlgorithms.LZ4HC">
            <summary>
            获取 LZ4 HC 压缩算法，它的特点是压缩率较低（略低于 Deflate），解压极快，压缩较慢（略快于 Deflate）。
            </summary>
        </member>
        <member name="T:Ceeji.Data.GZipAlgorithm">
            <summary>
            代表 GZip 压缩格式。
            </summary>
        </member>
        <member name="M:Ceeji.Data.GZipAlgorithm.CompressBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <param name="outputBuffer">将转换写入的输出。</param>
            <param name="outputOffset">输出字节数组中的偏移量，从该位置开始写入数据。</param>
            <returns>计算所得的转换的字节数。</returns>
        </member>
        <member name="M:Ceeji.Data.GZipAlgorithm.CompressFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <returns>计算所得的转换。</returns>
        </member>
        <member name="M:Ceeji.Data.GZipAlgorithm.DecompressBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <param name="outputBuffer">将转换写入的输出。</param>
            <param name="outputOffset">输出字节数组中的偏移量，从该位置开始写入数据。</param>
            <returns>计算所得的转换的字节数。</returns>
        </member>
        <member name="M:Ceeji.Data.GZipAlgorithm.DecompressFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <returns>计算所得的转换。</returns>
        </member>
        <member name="T:Ceeji.Data.DeflateAlgorithm">
            <summary>
            代表 Deflate 压缩算法。
            </summary>
        </member>
        <member name="M:Ceeji.Data.DeflateAlgorithm.CompressBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <param name="outputBuffer">将转换写入的输出。</param>
            <param name="outputOffset">输出字节数组中的偏移量，从该位置开始写入数据。</param>
            <returns>计算所得的转换的字节数。</returns>
        </member>
        <member name="M:Ceeji.Data.DeflateAlgorithm.CompressFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <returns>计算所得的转换。</returns>
        </member>
        <member name="M:Ceeji.Data.DeflateAlgorithm.DecompressBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <param name="outputBuffer">将转换写入的输出。</param>
            <param name="outputOffset">输出字节数组中的偏移量，从该位置开始写入数据。</param>
            <returns>计算所得的转换的字节数。</returns>
        </member>
        <member name="M:Ceeji.Data.DeflateAlgorithm.DecompressFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            转换指定字节数组的指定区域。
            </summary>
            <param name="inputBuffer">要为其计算转换的输入。</param>
            <param name="inputOffset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="inputCount">字节数组中用作数据的字节数。</param>
            <returns>计算所得的转换。</returns>
        </member>
        <member name="T:Ceeji.Data.HashHelper">
            <summary>
            哈希支持类，支持对所有继承于 HashAlgorithm 类型的类计算哈希，支持 MD5、SHA1、SHA256、SHA512 的快捷计算。
            </summary>
        </member>
        <member name="M:Ceeji.Data.HashHelper.SHA256(System.IO.Stream)">
            <summary>
            计算 SHA256 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.SHA256(System.Byte[])">
            <summary>
            计算 SHA256 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.SHA256(System.String,System.Text.Encoding)">
            <summary>
            计算 SHA256 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.SHA1(System.IO.Stream)">
            <summary>
            计算 SHA1 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.SHA1(System.Byte[])">
            <summary>
            计算 SHA1 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.SHA1(System.String,System.Text.Encoding)">
            <summary>
            计算 SHA1 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.SHA512(System.IO.Stream)">
            <summary>
            计算 SHA512 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.SHA512(System.Byte[])">
            <summary>
            计算 SHA512 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.SHA512(System.String,System.Text.Encoding)">
            <summary>
            计算 SHA512 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.MD5(System.IO.Stream)">
            <summary>
            计算 MD5 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.MD5(System.Byte[])">
            <summary>
            计算 MD5 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.MD5(System.String,System.Text.Encoding)">
            <summary>
            计算 MD5 的值。
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.ComputeRawHash(System.Byte[],System.Security.Cryptography.HashAlgorithm)">
            <summary>
            使用指定的哈希算法计算哈希。
            </summary>
            <param name="algorithm"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.ComputeRawHash(System.IO.Stream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            使用指定的哈希算法计算哈希。
            </summary>
            <param name="algorithm"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.ComputeStringHash(System.IO.Stream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            使用指定的哈希算法计算哈希，返回字符串值。
            </summary>
            <param name="algorithm"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.ComputeStringHash(System.Security.Cryptography.HashAlgorithm,System.IO.Stream)">
            <summary>
            使用指定的哈希算法计算哈希，返回字符串值。
            </summary>
            <param name="algorithm"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.ComputeStringHash(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            使用指定的哈希算法计算哈希，返回字符串值。
            </summary>
            <param name="algorithm"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.ComputeStringHash(System.Byte[],System.Security.Cryptography.HashAlgorithm)">
            <summary>
            使用指定的哈希算法计算哈希，返回字符串值。
            </summary>
            <param name="algorithm"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.HashHelper.GetHashedPassword(System.String,System.String)">
            <summary>
            将密码哈希，使用盐。用户每次创建或者修改密码一定要使用一个新的随机的盐。
            </summary>
            <param name="password"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="P:Ceeji.Data.HashHelper.DefaultEncoding">
            <summary>
            设置对字符串哈希时使用的默认编码。
            </summary>
        </member>
        <member name="P:Ceeji.Data.HashHelper.SHA256Algorithm">
            <summary>
            获取 SHA256 算法的实例。
            </summary>
        </member>
        <member name="P:Ceeji.Data.HashHelper.SHA512Algorithm">
            <summary>
            获取 SHA512 算法的实例。
            </summary>
        </member>
        <member name="P:Ceeji.Data.HashHelper.SHA1Algorithm">
            <summary>
            获取 SHA1 算法的实例。
            </summary>
        </member>
        <member name="P:Ceeji.Data.HashHelper.MD5Algorithm">
            <summary>
            获取 MD5 算法的实例。
            </summary>
        </member>
        <member name="T:System.IEnumerableExt">
            <summary>
            提供对列表、可枚举对象和集合的迭代方法。
            </summary>
        </member>
        <member name="M:System.IEnumerableExt.Iterate(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            在指定的元素中运行迭代函数。返回对象本身，便于执行进一步操作。
            </summary>
            <param name="who">要为哪个可迭代对象执行迭代。</param>
            <param name="act">要执行的迭代委托。</param>
        </member>
        <member name="M:System.IEnumerableExt.FindAll(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            在指定的元素中运行迭代函数。返回一个枚举数，包括所有委托返回 true 的对象。
            </summary>
            <param name="who">要为哪个可迭代对象执行迭代。</param>
            <param name="func">要执行的迭代委托。</param>
        </member>
        <member name="M:System.IEnumerableExt.Iterate``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            在指定的元素中运行迭代函数。返回对象本身，便于执行进一步操作。
            </summary>
            <param name="who">要为哪个可迭代对象执行迭代。</param>
            <param name="act">要执行的迭代委托。</param>
        </member>
        <member name="M:System.IEnumerableExt.FindAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            在指定的元素中运行迭代函数。返回一个枚举数，包括所有委托返回 true 的对象。
            </summary>
            <param name="who">要为哪个可迭代对象执行迭代。</param>
            <param name="func">要执行的迭代委托。</param>
        </member>
        <member name="M:System.IEnumerableExt.Iterate``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            在指定的列表中运行迭代函数，并可以获知当前迭代位置。返回对象本身，便于执行进一步操作。
            </summary>
            <param name="who">要为哪个可迭代对象执行迭代。</param>
            <param name="act">要执行的迭代委托。</param>
        </member>
        <member name="M:System.IEnumerableExt.FindAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            在指定的列表中运行迭代函数，并可以获知当前迭代位置。返回对象本身，便于执行进一步操作。
            </summary>
            <param name="who">要为哪个可迭代对象执行迭代。</param>
            <param name="func">要执行的迭代委托。</param>
        </member>
        <member name="M:System.IEnumerableExt.ParallelIterate``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            在指定的列表中并行运行迭代函数，并可以获知当前迭代位置。返回对象本身，便于执行进一步操作。【需要 .NET Framework 4，否则返回 NotSupportedException】
            </summary>
            <param name="who">要为哪个可迭代对象执行迭代。</param>
            <param name="func">要执行的迭代委托。</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:System.IEnumerableExt.Fill(System.Collections.IList,System.Object)">
            <summary>
            填充指定的列表的每一项。返回对象本身，便于执行进一步操作。
            </summary>
            <param name="who">要为哪个可迭代对象执行迭代。</param>
            <param name="val">要填充的值。</param>
        </member>
        <member name="M:System.IEnumerableExt.Fill``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            填充指定的列表的每一项。返回对象本身，便于执行进一步操作。对于引用类型，这可能导致所有的元素都是同一个元素的引用。
            </summary>
            <param name="who">要为哪个可迭代对象执行迭代。</param>
            <param name="val">要填充的值。</param>
        </member>
        <member name="M:System.IEnumerableExt.Fill``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,``0})">
            <summary>
            填充指定的列表的每一项。返回对象本身，便于执行进一步操作。
            </summary>
            <param name="who">要为哪个可迭代对象执行迭代。</param>
            <param name="val">要填充的值。</param>
        </member>
        <member name="M:System.IEnumerableExt.WithIndex``1(System.Collections.Generic.IList{``0})">
            <summary>
            返回 IList 的带有索引的包装。
            </summary>
            <param name="who">要为哪个可迭代对象执行迭代。</param>
            <param name="val">要填充的值。</param>
        </member>
        <member name="M:System.IEnumerableExt.ToMultidimensionalArray``1(``0[][])">
            <summary>
            将指定的“数组的数组”转换为多维数组。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:System.IEnumerableExt.ToMultidimensionalArray``1(System.Collections.Generic.IList{``0[]})">
            <summary>
            将指定的“数组的数组”转换为多维数组。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Ceeji.Data.LZ4Algorithm">
            <summary>
            实现 LZ4 压缩算法。
            </summary>
        </member>
        <member name="P:Ceeji.Data.LZ4Algorithm.CompressionLevel">
            <summary>
            获取算法的压缩级别，其中，0 为普通压缩，1 为极限压缩（LZ4 HC）。
            </summary>
        </member>
        <member name="P:Ceeji.Data.LZ4Algorithm.BitMode">
            <summary>
            获取算法是在 32 位 还是 64 位下执行。
            </summary>
        </member>
        <member name="T:Ceeji.Data.ObjectPool`1">
            <summary>
            代表一个简单的，线程安全的对象池对象。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Ceeji.Data.ObjectPool`1.DefaultMinCount">
            <summary>
            获取默认的最少可用对象数量。
            </summary>
        </member>
        <member name="F:Ceeji.Data.ObjectPool`1.DefaultMaxCount">
            <summary>
            获取默认的最多可用对象数量。
            </summary>
        </member>
        <member name="M:Ceeji.Data.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            创建 <see cref="T:Ceeji.Data.ObjectPool`1"/> 的新实例。此实例具有默认的最小、最大池中成员数量。
            </summary>
            <param name="createFactory">一个委托，用来创建新的对象。</param>
        </member>
        <member name="M:Ceeji.Data.ObjectPool`1.#ctor(System.Func{`0},System.Int32,System.Int32)">
            <summary>
            创建 <see cref="T:Ceeji.Data.ObjectPool`1"/> 的新实例。
            </summary>
            <param name="createFactory">一个委托，用来创建新的对象。</param>
            <param name="minCount">对象池中对象的最少数目。系统将维持对象池中至少存在这样数目的对象。</param>
            <param name="maxCount">对象池中对象的最多数目。系统将维持对象池中至多存在这样数目的对象。</param>
        </member>
        <member name="M:Ceeji.Data.ObjectPool`1.#ctor(System.Func{`0},System.Action{`0},System.Int32,System.Int32)">
            <summary>
            创建 <see cref="T:Ceeji.Data.ObjectPool`1"/> 的新实例。
            </summary>
            <param name="createFactory">一个委托，用来创建新的对象。</param>
            <param name="minCount">对象池中对象的最少数目。系统将维持对象池中至少存在这样数目的对象。</param>
            <param name="maxCount">对象池中对象的最多数目。系统将维持对象池中至多存在这样数目的对象。</param>
            <param name="resetFactory">设置重置对象以便重新使用的工厂方法。</param>
        </member>
        <member name="M:Ceeji.Data.ObjectPool`1.#ctor(System.Func{`0},System.Action{`0},System.Action{`0},System.Int32,System.Int32)">
            <summary>
            创建 <see cref="T:Ceeji.Data.ObjectPool`1"/> 的新实例。
            </summary>
            <param name="createFactory">一个委托，用来创建新的对象。</param>
            <param name="minCount">对象池中对象的最少数目。系统将维持对象池中至少存在这样数目的对象。</param>
            <param name="maxCount">对象池中对象的最多数目。系统将维持对象池中至多存在这样数目的对象。</param>
            <param name="resetFactory">设置重置对象以便重新使用的工厂方法。</param>
            <param name="disposeFactory">设置彻底释放对象的工厂方法。</param>
        </member>
        <member name="M:Ceeji.Data.ObjectPool`1.recycle(Ceeji.Data.PooledObject{`0})">
            <summary>
            回收对象。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Ceeji.Data.ObjectPool`1.Get">
            <summary>
            获得一个可用的对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.ObjectPool`1.ensureSize">
            <summary>
            确保数量符合要求。
            </summary>
        </member>
        <member name="P:Ceeji.Data.ObjectPool`1.CreateFactory">
            <summary>
            获取或设置创建对象的工厂方法。
            </summary>
        </member>
        <member name="P:Ceeji.Data.ObjectPool`1.ResetFactory">
            <summary>
            获取或设置重置对象以便重新使用的工厂方法。
            </summary>
        </member>
        <member name="P:Ceeji.Data.ObjectPool`1.DisposeFactory">
            <summary>
            获取或设置彻底释放对象的工厂方法。
            </summary>
        </member>
        <member name="E:Ceeji.Data.ObjectPool`1.MaxCountExceed">
            <summary>
            当超过最大数量时发生，方便测试时通过此事件了解到需要增加 MaxCount 属性。
            </summary>
        </member>
        <member name="P:Ceeji.Data.ObjectPool`1.MinCount">
            <summary>
            获取对象池中对象的最少数目。系统将维持对象池中至少存在这样数目的对象。
            </summary>
        </member>
        <member name="P:Ceeji.Data.ObjectPool`1.MaxCount">
            <summary>
            获取对象池中对象的最大数目。系统将维持对象池中至多存在这样数目的对象。
            </summary>
        </member>
        <member name="T:Ceeji.Data.PooledObject`1">
            <summary>
            代表被对象池所管理的对象。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Ceeji.Data.PooledObject`1.Value">
            <summary>
            获取对象的值。
            </summary>
        </member>
        <member name="T:Ceeji.Delayed`1">
            <summary>
            Provides support for lazy initialization. 
            </summary>
            <typeparam name="T">Specifies the type of element being laziliy initialized.</typeparam> 
            <remarks> 
            <para>
            By default, all public and protected members of <see cref="T:Ceeji.Delayed`1"> are thread-safe and may be used 
            concurrently from multiple threads.  These thread-safety guarantees may be removed optionally and per instance
            using parameters to the type's constructors.
            </see></para>
            </remarks> 
        </member>
        <member name="M:Ceeji.Delayed`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ceeji.Delayed{T}"> class that
            uses <typeparamref name="T">'s default constructor for lazy initialization.
            </typeparamref></see></summary> 
            <remarks>
            An instance created with this constructor may be used concurrently from multiple threads. 
            </remarks> 
        </member>
        <!-- 对于成员“M:Ceeji.Delayed`1.#ctor(System.Func{`0})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Ceeji.Delayed`1.#ctor(System.Boolean)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Ceeji.Delayed`1.#ctor(Ceeji.DelayThreadSafetyMode)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Ceeji.Delayed`1.#ctor(System.Func{`0},System.Boolean)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Ceeji.Delayed`1.#ctor(System.Func{`0},Ceeji.DelayThreadSafetyMode)”忽略有格式错误的 XML 注释 -->
        <member name="M:Ceeji.Delayed`1.GetObjectFromMode(Ceeji.DelayThreadSafetyMode)">
            <summary> 
            Static helper function that returns an object based on the given mode. it also throws an exception if the mode is invalid
            </summary>
        </member>
        <member name="M:Ceeji.Delayed`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Forces initialization during serialization.</summary> 
            <param name="context">The StreamingContext for the serialization operation. </param>
        </member>
        <member name="M:Ceeji.Delayed`1.ToString">
            <summary>Creates and returns a string representation of this instance.</summary> 
            <returns>The result of calling <see cref="M:System.Object.ToString"> on the <see cref="P:Ceeji.Delayed`1.Value">.</see></see></returns>
            <exception cref="T:System.NullReferenceException"> 
            The <see cref="P:Ceeji.Delayed`1.Value"> is null.
            </see></exception>
        </member>
        <member name="M:Ceeji.Delayed`1.LazyInitValue">
            <summary>
            local helper method to initialize the value 
            </summary>
            <returns>The inititialized T value</returns>
        </member>
        <member name="M:Ceeji.Delayed`1.CreateValue">
            <summary>Creates an instance of T using m_valueFactory in case its not null or use reflection to create a new T()</summary> 
            <returns>An instance of Boxed.</returns>
        </member>
        <member name="P:Ceeji.Delayed`1.ValueForDebugDisplay">
            <summary>
            Gets the value of the Delayed&lt;T&gt; for debugging display purposes.
            </summary>
        </member>
        <member name="P:Ceeji.Delayed`1.Mode">
            <summary>
            Gets a value indicating whether this instance may be used concurrently from multiple threads. 
            </summary>
        </member>
        <member name="P:Ceeji.Delayed`1.IsValueFaulted">
            <summary> 
            Gets whether the value creation is faulted or not
            </summary> 
        </member>
        <member name="P:Ceeji.Delayed`1.IsValueCreated">
            <summary>Gets a value indicating whether the <see cref="T:Ceeji.Delayed{T}"> has been initialized. 
            </see></summary> 
            <value>true if the <see cref="T:Ceeji.Delayed{T}"> instance has been initialized;
            otherwise, false.</see></value> 
            <remarks>
            The initialization of a <see cref="T:Ceeji.Delayed{T}"> instance may result in either
            a value being produced or an exception being thrown.  If an exception goes unhandled during initialization,
            the <see cref="T:Ceeji.Delayed{T}"> instance is still considered initialized, and that exception 
            will be thrown on subsequent accesses to <see cref="P:Ceeji.Delayed`1.Value">.  In such cases, <see cref="P:Ceeji.Delayed`1.IsValueCreated">
            will return true. 
            </see></see></see></see></remarks> 
        </member>
        <member name="P:Ceeji.Delayed`1.Value">
            <summary>Gets the lazily initialized value of the current <see cref="T:Ceeji.Delayed{T}">.</see></summary>
            <value>The lazily initialized value of the current <see cref="T:Ceeji.Delayed{T}">.</see></value> 
            <exception cref="T:System.MissingMemberException">
            The <see cref="T:Ceeji.Delayed{T}"> was initialized to use the default constructor 
            of the type being lazily initialized, and that type does not have a public, parameterless constructor. 
            </see></exception>
            <exception cref="T:System.MemberAccessException"> 
            The <see cref="T:Ceeji.Delayed{T}"> was initialized to use the default constructor
            of the type being lazily initialized, and permissions to access the constructor were missing.
            </see></exception>
            <exception cref="T:System.InvalidOperationException"> 
            The <see cref="T:Ceeji.Delayed{T}"> was constructed with the <see cref="T:System.Threading.DelayThreadSafetyMode.ExecutionAndPublication"> or
            <see cref="T:System.Threading.DelayThreadSafetyMode.None">  and the initialization function attempted to access <see cref="P:Ceeji.Delayed`1.Value"> on this instance. 
            </see></see></see></see></exception> 
            <remarks>
            If <see cref="P:Ceeji.Delayed`1.IsValueCreated"> is false, accessing <see cref="P:Ceeji.Delayed`1.Value"> will force initialization. 
            Please <see cref="!:System.Threading.DelayThreadSafetyMode"> for more information on how <see cref="T:Ceeji.Delayed{T}"> will behave if an exception is thrown
            from initialization delegate.
            </see></see></see></see></remarks>
        </member>
        <member name="T:Ceeji.Delayed`1.Boxed">
            <summary>
            wrapper class to box the initialized value, this is mainly created to avoid boxing/unboxing the value each time the value is called in case T is 
            a value type 
            </summary>
        </member>
        <member name="T:Ceeji.Delayed`1.LazyInternalExceptionHolder">
            <summary>
            Wrapper class to wrap the excpetion thrown by the value factory
            </summary> 
        </member>
        <!-- 对于成员“T:Ceeji.System_LazyDebugView`1”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Ceeji.System_LazyDebugView`1.#ctor(Ceeji.Delayed{`0})”忽略有格式错误的 XML 注释 -->
        <member name="P:Ceeji.System_LazyDebugView`1.IsValueCreated">
            <summary>Returns whether the Lazy object is initialized or not.</summary>
        </member>
        <member name="P:Ceeji.System_LazyDebugView`1.Value">
            <summary>Returns the value of the Lazy object.</summary>
        </member>
        <member name="P:Ceeji.System_LazyDebugView`1.Mode">
            <summary>Returns the execution mode of the Lazy object</summary> 
        </member>
        <member name="P:Ceeji.System_LazyDebugView`1.IsValueFaulted">
            <summary>Returns the execution mode of the Lazy object</summary>
        </member>
        <member name="F:Ceeji.DelayThreadSafetyMode.None">
            <summary>
            Ceeji.Delayed 实例不是线程安全的；如果从多个线程访问该实例，则其行为不确定。 仅应在高性能至关重要并且保证决不会从多个线程初始化 Ceeji.Delayed 实例时才使用该模式。 如果使用指定初始化方法（valueFactory 参数）的 Ceeji.Delayed 构造函数，并且如果此初始化方法在您首次调用
                Ceeji.Delayed.Value 属性时引发了一个异常（或无法处理异常），则会缓存该异常并在随后调用 Ceeji.Delayed.Value
                属性时再次引发该异常。 如果您使用不指定初始化方法的 Ceeji.Delayed 构造函数，则不会缓存 T 默认构造函数引发的异常。 在此情况下，对
                Ceeji.Delayed.Value 属性进行后续调用可成功初始化 Ceeji.Delayed 实例。 如果初始化方法递归访问 Ceeji.Delayed
               实例的 Ceeji.Delayed.Value 属性，则引发 System.InvalidOperationException。
            </summary>
        </member>
        <member name="F:Ceeji.DelayThreadSafetyMode.PublicationOnly">
            <summary>
            当多个线程尝试同时初始化一个 Ceeji.Delayed 实例时，允许所有线程都运行初始化方法（如果没有初始化方法，则为默认构造函数）。 完成初始化的第一个线程设置
            Ceeji.Delayed 实例的值。 该值将返回给同时运行初始化方法的所有其他线程，除非该初始化方法对这些线程引发异常。 争用线程创建的任何
             T 实例都将被丢弃。 如果初始化方法对任何线程引发异常，则该异常会从该线程上的 Ceeji.Delayed.Value 属性传播出去。 不缓存该异常。
             Ceeji.Delayed.IsValueCreated 属性的值仍然为 false，并且随后通过其中引发异常的线程或通过其他线程对 Ceeji.Delayed.Value
             属性的调用会导致初始化方法再次运行。 如果初始化方法递归访问 Ceeji.Delayed 实例的 Ceeji.Delayed.Value 属性，则不会引发异常。
            </summary>
        </member>
        <member name="F:Ceeji.DelayThreadSafetyMode.ExecutionAndPublication">
            <summary>
                使用锁来确保只有一个线程可以在线程安全的方式下初始化 Ceeji.Delayed 实例。 如果初始化方法（如果没有初始化方法，则为默认构造函数）在内部使用锁，则可能会发生死锁。
                如果使用指定初始化方法（valueFactory 参数）的 Ceeji.Delayed 构造函数，并且如果此初始化方法在您首次调用 Ceeji.Delayed.Value
                属性时引发了一个异常（或无法处理异常），则会缓存该异常并在随后调用 Ceeji.Delayed.Value 属性时再次引发该异常。 如果您使用不指定初始化方法的
                Ceeji.Delayed 构造函数，则不会缓存 T 默认构造函数引发的异常。 在此情况下，对 Ceeji.Delayed.Value 属性进行后续调用可成功初始化
                Ceeji.Delayed 实例。 如果初始化方法递归访问 Ceeji.Delayed 实例的 Ceeji.Delayed.Value 属性，则引发
                System.InvalidOperationException。
            </summary>
        </member>
        <member name="T:Ceeji.UI.ObjectDisplayWrapper`1">
            <summary>
            一个对象显示包装，用于在列表框、组合框等各种使用对象的 ToString 方法显示文本的地方，以及需要 Debug 实时查看数据的地点，以便方便显示对象的名称或内容，同时保留对象的引用。
            </summary>
            <typeparam name="T">对象的类型。</typeparam>
        </member>
        <member name="M:Ceeji.UI.ObjectDisplayWrapper`1.#ctor(`0)">
            <summary>
            创建 <see cref="T:Ceeji.UI.ObjectDisplayWrapper`1"/> 的新实例。使用对象的 ObjectDisplayFormatter 的默认格式化委托进行格式化，如果其为 null，则使用对象的 ToString() 方法来显示其名称。
            </summary>
            <param name="obj">要包装的对象。</param>
        </member>
        <member name="M:Ceeji.UI.ObjectDisplayWrapper`1.#ctor(`0,System.Func{`0,System.String})">
            <summary>
            创建 <see cref="T:Ceeji.UI.ObjectDisplayWrapper`1"/> 的新实例。尝试使用指定的格式化委托进行格式化，或（如果为 null）使用对象的 ObjectDisplayFormatter 的默认格式化委托进行格式化，如果其也为 null，则使用对象的 ToString() 方法来显示其名称。
            </summary>
            <param name="obj">要包装的对象。</param>
            <param name="textFormatter">要使用的文本格式化器。</param>
        </member>
        <member name="M:Ceeji.UI.ObjectDisplayWrapper`1.#ctor(`0,System.String)">
            <summary>
            创建 <see cref="T:Ceeji.UI.ObjectDisplayWrapper`1"/> 的新实例。
            </summary>
            <param name="obj">要包装的对象。</param>
            <param name="displayText">要显示的文本。</param>
        </member>
        <member name="M:Ceeji.UI.ObjectDisplayWrapper`1.ToString">
            <summary>
            返回代表被包装对象名称或内容的文本，具体返回内容根据 DisplayText 而定。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ceeji.UI.ObjectDisplayWrapper`1.Object">
            <summary>
            返回所关联的对象。
            </summary>
        </member>
        <member name="P:Ceeji.UI.ObjectDisplayWrapper`1.DisplayText">
            <summary>
            设置显示文本。如果为 null，尝试使用对象的 ObjectDisplayFormatter 的默认格式化委托进行格式化，如果其为 null，则使用对象的 ToString() 方法来显示其名称。
            </summary>
        </member>
        <member name="P:Ceeji.UI.ObjectDisplayWrapper`1.TextFormatter">
            <summary>
            返回或设置文本格式化器。如果为 null，则使用默认值。
            </summary>
        </member>
        <member name="T:Ceeji.UI.ObjectDisplayDefaultFormatter`1">
            <summary>
            用于存取对于特定类型的对象如何格式化显示的默认实现的静态类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Ceeji.UI.ObjectDisplayDefaultFormatter`1.TextFormatter">
            <summary>
            设置或返回指定类型的默认显示文本格式化器。
            </summary>
        </member>
        <member name="T:Ceeji.Data.RandomHelper">
            <summary>
            提供对随机变量的支持。
            </summary>
        </member>
        <member name="M:Ceeji.Data.RandomHelper.NextStrongRandomString(System.Int32)">
            <summary>
            产生一个强完全随机的字符串。这种变量在加密中是安全的，和传统的随机数生成方法不同。
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.RandomHelper.NextWeakRandomString(System.Int32)">
            <summary>
            产生一个弱随机的字符串。这种变量在加密中是不安全的，但是速度比较快。
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.RandomHelper.NextWeakRandomByteArray(System.Int32)">
            <summary>
            产生一个弱随机的字节数组。这种变量在加密中是不安全的，但是速度比较快。
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.RandomHelper.NextStrongRandomByteArray(System.Int32,System.Boolean)">
            <summary>
            产生一个强完全随机的字节数组。如果 allowZeroByte 为 false，产生的序列中不含有零。这种变量在加密中是安全的，和传统的随机数生成方法不同。
            </summary>
            <param name="length"></param>
            <param name="allowZeroByte">是否允许 0 字节。</param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.RandomHelper.NewSalt">
            <summary>
            产生一个随机的盐，盐的长度为 23 位。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.RandomHelper.NewSessionID">
            <summary>
            产生一个随机 session id，由 32 位随机字符串组成。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.RandomHelper.NewSessionKey">
            <summary>
            产生一个随机 session key，由 64 位随机字符串组成。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.RandomHelper.NextRandomInt">
            <summary>
            产生非负随机数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.RandomHelper.NextRandomInt(System.Int32,System.Int32)">
            <summary>
            产生非负随机数。
            </summary>
            <param name="max">最大值，该值不会被取到。</param>
            <param name="min">最小值。</param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.RandomHelper.RandomInt">
            <summary>
            产生非负随机数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.RandomHelper.RandomInt(System.Int32,System.Int32)">
            <summary>
            产生非负随机数。
            </summary>
            <param name="max">最大值，该值不会被取到。</param>
            <param name="min">最小值。</param>
            <returns></returns>
        </member>
        <member name="T:Ceeji.Data.StringExt">
            <summary>
            提供对 System.String 类型的扩展方法。
            </summary>
        </member>
        <member name="M:Ceeji.Data.StringExt.GetStringWihoutBOM(System.String)">
            <summary>
            获取一个新字符串，其中不包含 UTF-8 的 BOM 字符。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.StringExt.IsEmptyOrNull(System.String)">
            <summary>
            判断指定的对象，如果对象是 null 或零长度列表，则为 true，否则为 false。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.StringExt.IsEmptyOrNull(System.Collections.IList)">
            <summary>
            判断指定的对象，如果对象是 null 或零长度列表，则为 true，否则为 false。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.StringExt.IsNull(System.Object)">
            <summary>
            判断指定的对象是否为 null。
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.StringExt.SHA1(System.String,System.Text.Encoding)">
            <summary>
            计算哈希值。
            </summary>
            <param name="source"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.StringExt.SHA256(System.String,System.Text.Encoding)">
            <summary>
            计算哈希值。
            </summary>
            <param name="source"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.StringExt.SHA512(System.String,System.Text.Encoding)">
            <summary>
            计算哈希值。
            </summary>
            <param name="source"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Data.StringExt.MD5(System.String,System.Text.Encoding)">
            <summary>
            计算哈希值。
            </summary>
            <param name="source"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Ceeji.Log.EventLogger">
            <summary>
            代表一个事件记录器。此记录器将记录下应用程序发生的错误。该线程和所有相关类、操作都是线程安全的。你也可以继承并实现新的 Ceeji.Log.LogWriter 个性化输出方式。
            </summary>
        </member>
        <member name="M:Ceeji.Log.EventLogger.#ctor">
            <summary>
            创建 Ceeji.EventLogger 的一个新实例。
            </summary>
        </member>
        <member name="M:Ceeji.Log.EventLogger.#ctor(System.Collections.Generic.IEnumerable{Ceeji.Log.LogWriter})">
            <summary>
            创建 Ceeji.EventLogger 的一个新实例。
            </summary>
            <param name="writers">要使用的输出方式。</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.AddLogWriter(Ceeji.Log.LogWriter)">
            <summary>
            添加一个日志记录器。
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.AddLogWriters(System.Collections.Generic.IEnumerable{Ceeji.Log.LogWriter})">
            <summary>
            添加一批日志记录器。
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.RemoveWriter(Ceeji.Log.LogWriter)">
            <summary>
            删除一个日志记录器。如果本来就不存在，不会产生错误。
            </summary>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Error(System.String)">
            <summary>
            记录信息。此方法对性能有略微影响，一般情况下都可以使用。如果结合使用 LogFilter 功能，则不必担心循环中大量的 Debug 信息输出，则此方式记录日志可能是性价比最高、最好的方式。
            </summary>
            <param name="message">要记录的消息。</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Error(System.Exception)">
            <summary>
            记录信息。此方法对性能有略微影响，一般情况下都可以使用。如果结合使用 LogFilter 功能，则不必担心循环中大量的 Debug 信息输出，则此方式记录日志可能是性价比最高、最好的方式。
            </summary>
            <param name="message">要记录的消息。</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Fatal(System.Exception)">
            <summary>
            记录信息。此方法对性能有略微影响，一般情况下都可以使用。如果结合使用 LogFilter 功能，则不必担心循环中大量的 Debug 信息输出，则此方式记录日志可能是性价比最高、最好的方式。
            </summary>
            <param name="exception">要记录的消息。</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Fatal(System.String)">
            <summary>
            记录信息。此方法对性能有略微影响，一般情况下都可以使用。如果结合使用 LogFilter 功能，则不必担心循环中大量的 Debug 信息输出，则此方式记录日志可能是性价比最高、最好的方式。
            </summary>
            <param name="message">要记录的消息。</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Warning(System.String)">
            <summary>
            记录信息。此方法对性能有略微影响，一般情况下都可以使用。如果结合使用 LogFilter 功能，则不必担心循环中大量的 Debug 信息输出，则此方式记录日志可能是性价比最高、最好的方式。
            </summary>
            <param name="message">要记录的消息。</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Info(System.String)">
            <summary>
            记录信息。此方法对性能有略微影响，一般情况下都可以使用。如果结合使用 LogFilter 功能，则不必担心循环中大量的 Debug 信息输出，则此方式记录日志可能是性价比最高、最好的方式。
            </summary>
            <param name="message">要记录的消息。</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Debug(System.String)">
            <summary>
            记录信息。此方法对性能有略微影响，一般情况下都可以使用。如果结合使用 LogFilter 功能，则不必担心循环中大量的 Debug 信息输出，则此方式记录日志可能是性价比最高、最好的方式。
            </summary>
            <param name="message">要记录的消息。</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Log(Ceeji.Log.LogType,System.String)">
            <summary>
            记录日志。
            </summary>
            <param name="message">要记录的消息。</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Debug(System.String,System.Reflection.MethodInfo)">
            <summary>
            记录信息。请在 method 参数提供 MethodInfo.GetCurrentMethod(). 此方法在中等性能要求的程序中使用。
            </summary>
            <param name="message">要记录的消息。</param>
            <param name="method">提供 MethodInfo.GetCurrentMethod().</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Warning(System.String,System.Reflection.MethodInfo)">
            <summary>
            记录信息。请在 method 参数提供 MethodInfo.GetCurrentMethod(). 此方法在中等性能要求的程序中使用。
            </summary>
            <param name="message">要记录的消息。</param>
            <param name="method">提供 MethodInfo.GetCurrentMethod().</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Error(System.String,System.Reflection.MethodInfo)">
            <summary>
            记录信息。请在 method 参数提供 MethodInfo.GetCurrentMethod(). 此方法在中等性能要求的程序中使用。
            </summary>
            <param name="message">要记录的消息。</param>
            <param name="method">提供 MethodInfo.GetCurrentMethod().</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Error(System.Exception,System.Reflection.MethodInfo)">
            <summary>
            记录信息。请在 method 参数提供 MethodInfo.GetCurrentMethod(). 此方法在中等性能要求的程序中使用。
            </summary>
            <param name="message">要记录的消息。</param>
            <param name="method">提供 MethodInfo.GetCurrentMethod().</param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Info(System.String,System.String,System.String,System.String)">
            <summary>
            记录信息。此方法在极端重视性能的情况下使用。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Debug(System.String,System.String,System.String,System.String)">
            <summary>
            记录调试信息。此方法在极端重视性能的情况下使用。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Warning(System.String,System.String,System.String,System.String)">
            <summary>
            记录警告信息。此方法在极端重视性能的情况下使用。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Log(Ceeji.Log.LogType,System.String,System.String,System.String,System.String)">
            <summary>
            记录日志信息。此方法在极端重视性能的情况下使用。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Error(System.String,System.String,System.String,System.String)">
            <summary>
            记录错误信息。此方法在极端重视性能的情况下使用。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Fatal(System.Exception,System.String,System.String,System.String,System.String)">
            <summary>
            记录错误信息。此方法在极端重视性能的情况下使用。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Ceeji.Log.EventLogger.Error(System.Exception,System.String,System.String,System.String)">
            <summary>
            记录错误信息。此方法在极端重视性能的情况下使用。
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Ceeji.Log.EventLogger.LogWriters">
            <summary>
            获取所有的日志输出器。
            </summary>
        </member>
        <member name="P:Ceeji.Log.EventLogger.LogLevel">
            <summary>
            最低日志级别。低于此级别的将不被记录。
            </summary>
        </member>
        <member name="T:Ceeji.Log.LoggingException">
            <summary>
            代表在日志中发生的错误。
            </summary>
        </member>
        <member name="M:Ceeji.Log.LoggingException.#ctor(System.String,System.Exception)">
            <summary>
            创建 LoggingException 的新实例。
            </summary>
            <param name="msg"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Ceeji.Log.LogType">
            <summary>
            代表日志类型。
            </summary>
        </member>
        <member name="F:Ceeji.Log.LogType.Error">
            <summary>
            错误，一般是异常
            </summary>
        </member>
        <member name="F:Ceeji.Log.LogType.Fatal">
            <summary>
            致命错误，一般是未处理的异常
            </summary>
        </member>
        <member name="T:Ceeji.Log.LogWriter">
            <summary>
            代表日志输出。此类是线程安全的。
            </summary>
        </member>
        <member name="M:Ceeji.Log.LogWriter.Prepare">
            <summary>
            准备日志输出。如果不运行此方法，不允许进行日志输出。如果多次运行，则不会报错。
            </summary>
        </member>
        <member name="M:Ceeji.Log.LogWriter.WriteLog(System.DateTime,System.String,System.String,System.String,Ceeji.Log.LogType,System.String,System.Exception)">
            <summary>
            写日志。此方法保证不发生异常。
            </summary>
            <param name="time">事件发生的时间。</param>
            <param name="runningClass">事件所属的类。</param>
            <param name="runningMethod">事件所属的方法。</param>
            <param name="type">日志类型。</param>
        </member>
        <member name="M:Ceeji.Log.LogWriter.OnWriteLog(System.DateTime,System.String,System.String,System.String,Ceeji.Log.LogType,System.String,System.Exception)">
            <summary>
            写日志。此方法的异常会被忽略。此方法保证不会并发调用。
            </summary>
            <param name="time"></param>
            <param name="runningClass"></param>
            <param name="runningMethod"></param>
            <param name="type"></param>
            <param name="msg"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Ceeji.Log.LogWriter.GetExceptionDetailMessage(System.Exception)">
            <summary>
            获取异常的详细信息。
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Ceeji.Log.LogWriter.OnPrepare">
            <summary>
            在派生类中重写，实现准备日志。此方法保证只调用一次。如果准备失败，请抛出异常。
            </summary>
        </member>
        <member name="P:Ceeji.Log.LogWriter.IsPrepared">
            <summary>
            指示是否已经准备好进行日志输出。
            </summary>
        </member>
        <member name="T:Ceeji.Log.SingleFileLogger">
            <summary>
            一个基本的单文件日志记录器。
            </summary>
        </member>
        <member name="M:Ceeji.Log.SingleFileLogger.#ctor">
            <summary>
            创建 SingleFileLogger（一个基本的单文件日志记录器）。
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Ceeji.Log.SingleFileLogger.#ctor(System.String,System.Boolean)">
            <summary>
            创建 SingleFileLogger（一个基本的单文件日志记录器）。
            </summary>
            <param name="path">日志文件的路径。</param>
            <param name="shareWithOthers">在日志使用过程中，是否将日志共享给其他使用者。如果开启，会降低性能。并且，所有使用者都必须打开此模式。</param>
        </member>
        <member name="P:Ceeji.Log.SingleFileLogger.FilePath">
            <summary>
            获取或设置文件路径。
            </summary>
        </member>
    </members>
</doc>
