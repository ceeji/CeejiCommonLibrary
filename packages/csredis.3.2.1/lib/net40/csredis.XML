<?xml version="1.0"?>
<doc>
    <assembly>
        <name>csredis</name>
    </assembly>
    <members>
        <member name="T:CSRedis.RedisSubscriptionReceivedEventArgs">
            <summary>
            Provides data for the event that is raised when a subscription message is received
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionReceivedEventArgs.Message">
            <summary>
            The subscription message
            </summary>
        </member>
        <member name="T:CSRedis.RedisSubscriptionChangedEventArgs">
            <summary>
            Provides data for the event that is raised when a subscription channel is opened or closed
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionChangedEventArgs.Response">
            <summary>
            The subscription response
            </summary>
        </member>
        <member name="T:CSRedis.RedisTransactionQueuedEventArgs">
            <summary>
            Provides data for the event that is raised when a transaction command has been processed by the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisTransactionQueuedEventArgs.Status">
            <summary>
            The status code of the transaction command
            </summary>
        </member>
        <member name="P:CSRedis.RedisTransactionQueuedEventArgs.Command">
            <summary>
            The command that was queued
            </summary>
        </member>
        <member name="P:CSRedis.RedisTransactionQueuedEventArgs.Arguments">
            <summary>
            The arguments of the queued command
            </summary>
        </member>
        <member name="T:CSRedis.RedisMonitorEventArgs">
            <summary>
            Provides data for the event that is raised when a Redis MONITOR message is received
            </summary>
        </member>
        <member name="P:CSRedis.RedisMonitorEventArgs.Message">
            <summary>
            Monitor output
            </summary>
        </member>
        <member name="T:CSRedis.RedisException">
            <summary>
            Represents a Redis server error reply
            </summary>
        </member>
        <member name="T:CSRedis.RedisClientException">
            <summary>
            Exception thrown by RedisClient
            </summary>
        </member>
        <member name="M:CSRedis.RedisClientException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisClientException class
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CSRedis.RedisClientException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiate a new instance of the RedisClientException class
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:CSRedis.RedisException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisException class
            </summary>
            <param name="message">Server response</param>
        </member>
        <member name="T:CSRedis.RedisProtocolException">
            <summary>
            The exception that is thrown when an unexpected value is found in a Redis request or response 
            </summary>
        </member>
        <member name="M:CSRedis.RedisProtocolException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisProtocolException class
            </summary>
            <param name="message">Protocol violoation message</param>
        </member>
        <member name="M:CSRedis.Internal.Utilities.RedisArgs.Concat(System.Object[][])">
            <summary>
            Join arrays
            </summary>
            <param name="arrays">Arrays to join</param>
            <returns>Array of ToString() elements in each array</returns>
        </member>
        <member name="M:CSRedis.Internal.Utilities.RedisArgs.Concat(System.String,System.Object[])">
            <summary>
            Joine string with arrays
            </summary>
            <param name="str">Leading string element</param>
            <param name="arrays">Array to join</param>
            <returns>Array of str and ToString() elements of arrays</returns>
        </member>
        <member name="M:CSRedis.Internal.Utilities.RedisArgs.GetTupleArgs``2(System.Tuple{``0,``1}[])">
            <summary>
            Convert array of two-element tuple into flat array arguments
            </summary>
            <typeparam name="TItem1">Type of first item</typeparam>
            <typeparam name="TItem2">Type of second item</typeparam>
            <param name="tuples">Array of tuple arguments</param>
            <returns>Flattened array of arguments</returns>
        </member>
        <member name="M:CSRedis.Internal.Utilities.RedisArgs.GetScore(System.Double,System.Boolean)">
            <summary>
            Parse score for +/- infinity and inclusive/exclusive
            </summary>
            <param name="score">Numeric base score</param>
            <param name="isExclusive">Score is exclusive, rather than inclusive</param>
            <returns>String representing Redis score/range notation</returns>
        </member>
        <member name="T:CSRedis.IRedisClientAsync">
            <summary>
            Interface for asyncronous RedisClient methods
            </summary>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ConnectAsync">
            <summary>
            Open connection to redis server
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.CallAsync(System.String,System.String[])">
            <summary>
            Call arbitrary redis command
            </summary>
            <param name="command"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.AuthAsync(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Server password</param>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.EchoAsync(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Task associated with echo response</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PingAsync">
            <summary>
            Ping the server
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.QuitAsync">
            <summary>
            Close the connection
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SelectAsync(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DelAsync(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DumpAsync(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExistsAsync(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExpireAsync(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration in seconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second);
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExpireAtAsync(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.KeysAsync(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MoveAsync(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ObjectEncodingAsync(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ObjectAsync(CSRedis.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PersistAsync(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PExpireAsync(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond);
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PExpireAtAsync(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PTtlAsync(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RandomKeyAsync">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RenameAsync(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RenameNxAsync(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RestoreAsync(System.String,System.Int64,System.String)">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttl">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SortAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.TtlAsync(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.TypeAsync(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HDelAsync(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HExistsAsync(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HGetAsync(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HGetAllAsync``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HGetAllAsync(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HIncrByFloatAsync(System.String,System.String,System.Double)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HKeysAsync(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HLenAsync(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HMGetAsync(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HMSetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HMSetAsync``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HMSetAsync(System.String,System.String[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HValsAsync(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LIndexAsync(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LInsertAsync(System.String,CSRedis.RedisInsert,System.String,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LLenAsync(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LPopAsync(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LPushAsync(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LPushXAsync(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RPopAsync(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RPopLPushAsync(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RPushAsync(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RPushXAsync(System.String,System.Object[])">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SAddAsync(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SCardAsync(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SDiffAsync(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SInterAsync(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SIsMemberAsync(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SMembersAsync(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SPopAsync(System.String)">
            <summary>
            Remove and return a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SRandMemberAsync(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SRandMemberAsync(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SUnionAsync(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZAddAsync``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="memberScores">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZAddAsync(System.String,System.String[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="memberScores">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZCardAsync(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZCountAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZIncrByAsync(System.String,System.Double,System.String)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZInterStoreAsync(System.String,System.Double[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>Array of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRankAsync(System.String,System.String)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRemRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRankAsync(System.String,System.String)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZScoreAsync(System.String,System.String)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZUnionStoreAsync(System.String,System.Double[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PublishAsync(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PubSubChannelsAsync(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Glob-style channel pattern</param>
            <returns>Active channel names</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PubSubNumSubAsync(System.String[])">
            <summary>
            Return the number of subscribers (not counting clients subscribed to patterns) for the specified channels
            </summary>
            <param name="channels">Channels to query</param>
            <returns>Channel names and counts</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PubSubNumPatAsync">
            <summary>
            Return the number of subscriptions to patterns
            </summary>
            <returns>The number of patterns all the clients are subscribed to</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.EvalAsync(System.String,System.String[],System.String[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.EvalSHAAsync(System.String,System.String[],System.String[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ScriptExistsAsync(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="scripts">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ScriptFlushAsync">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ScriptKillAsync">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ScriptLoadAsync(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.AppendAsync(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.BitCountAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.BitOpAsync(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0)</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DecrAsync(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DecrByAsync(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.GetAsync(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.GetBitAsync(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.GetSetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key and return its old value
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.IncrAsync(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.IncrByAsync(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.IncrByFloatAsync(System.String,System.Double)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MGetAsync(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MSetAsync(System.Tuple{System.String,System.String}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MSetAsync(System.String[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MSetNxAsync(System.Tuple{System.String,System.String}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MSetNxAsync(System.String[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PSetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetAsync(System.String,System.Object,System.TimeSpan,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetAsync(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetAsync(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off)</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetNxAsync(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.StrLenAsync(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.BgRewriteAofAsync">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.BgSaveAsync">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientGetNameAsync">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientKillAsync(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientKillAsync(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">Client address</param>
            <param name="id">Client ID</param>
            <param name="type">Client type</param>
            <param name="skipMe">Set to true to skip calling client</param>
            <returns>The number of clients killed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientListAsync">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientPauseAsync(System.Int32)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="milliseconds">Time in milliseconds to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientPauseAsync(System.TimeSpan)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="timeout">Time to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientSetNameAsync(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces)</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ConfigGetAsync(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ConfigResetStatAsync">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ConfigRewriteAsync">
            <summary>
            Rewrites the redis.conf file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ConfigSetAsync(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DbSizeAsync">
            <summary>
            Return the number of keys in the selected database
            </summary>
            <returns>Number of keys</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DebugSegFaultAsync">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.FlushAllAsync">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.FlushDbAsync">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.InfoAsync(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LastSaveAsync">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RoleAsync">
            <summary>
            Provide information on the role of a Redis instance in the context of replication
            </summary>
            <returns>Role information</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SaveAsync">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ShutdownAsync(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SlaveOfAsync(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SlaveOfNoOneAsync">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SlowLogGetAsync(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SlowLogLenAsync">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SlowLogResetAsync">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SyncAsync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.TimeAsync">
            <summary>
            Return the current server time
            </summary>
            <returns>Server time</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MultiAsync">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DiscardAsync">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExecAsync">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.UnwatchAsync">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.WatchAsync(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PfAddAsync(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PfCountAsync(System.String[])">
            <summary>
            Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s);
            </summary>
            <param name="keys">One or more HyperLogLog keys to examine</param>
            <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PfMergeAsync(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="T:CSRedis.IRedisClient">
            <summary>
            Interface for syncronous RedisClient methods
            </summary>
        </member>
        <member name="M:CSRedis.IRedisClient.Connect(System.Int32)">
            <summary>
            Connect to the remote host
            </summary>
            <param name="timeout">Connection timeout in milliseconds</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Call(System.String,System.String[])">
            <summary>
            Call arbitrary Redis command
            </summary>
            <param name="command">Command name</param>
            <param name="args">Command arguments</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Auth(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Redis server password</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Echo(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Message</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Ping">
            <summary>
            Ping the server
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Quit">
            <summary>
            Close the connection
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Select(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Del(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns>Number of keys removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Dump(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Exists(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns>True if key exists</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Expire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second);</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Expire(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second);
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ExpireAt(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">UNIX timestamp</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Keys(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns>Array of keys matching pattern</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Migrate(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeoutMilliseconds">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Migrate(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Move(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns>True if key was moved</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ObjectEncoding(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Object(CSRedis.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Persist(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns>True if timeout was removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PExpire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond);</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PExpire(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond);
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PExpireAt(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds);</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PTtl(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in milliseconds</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.RandomKey">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns>A random key</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Rename(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.RenameNx(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>True if key was renamed</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Restore(System.String,System.Int64,System.String)">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttl">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Sort(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>The sorted list</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>Number of elements stored</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Ttl(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in seconds</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Type(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns>Type of key</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the set of keys in the currently selected Redis database
            </summary>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Set the maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HDel(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HExists(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HGet(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HGetAll``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HGetAll(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HIncrByFloat(System.String,System.String,System.Double)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HKeys(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HLen(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HMGet(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HMSet(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HMSet``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HMSet(System.String,System.String[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HSet(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HSetNx(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HVals(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the keys and values of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BLPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BLPop(System.Int32,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BLPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BRPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BRPop(System.Int32,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List value</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BRPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BRPopLPush(System.String,System.String,System.TimeSpan)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.LIndex(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.LInsert(System.String,CSRedis.RedisInsert,System.String,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.LLen(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.LPop(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.LPush(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.LPushX(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.LRem(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.LSet(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.RPop(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.RPopLPush(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.RPush(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.RPushX(System.String,System.Object[])">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SAdd(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SCard(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SDiff(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SDiffStore(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SInter(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SIsMember(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SMembers(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SMove(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SPop(System.String)">
            <summary>
            Remove and
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SRandMember(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SRandMember(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SUnion(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the elements of a set field
            </summary>
            <param name="key">Set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZAdd``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="memberScores">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZAdd(System.String,System.String[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="memberScores">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZCard(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZCount(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZCount(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZIncrBy(System.String,System.Double,System.String)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZInterStore(System.String,System.Double[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRange(System.String,System.Int64,System.Int64,System.Boolean)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <param name="withScores">Include scores in result</param>
             <returns>Array of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRangeWithScores(System.String,System.Int64,System.Int64)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRangeByScoreWithScores(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRank(System.String,System.String)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRemRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRevRange(System.String,System.Int64,System.Int64,System.Boolean)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <param name="withScores">Include scores in result</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRevRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRevRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRevRangeByScoreWithScores(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRevRank(System.String,System.String)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZScore(System.String,System.String)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZUnionStore(System.String,System.Double[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ZLexCount(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PSubscribe(System.String[])">
            <summary>
            Listen for messages published to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to subscribe</param>
        </member>
        <member name="M:CSRedis.IRedisClient.Publish(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PubSubChannels(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Return only channels matching this pattern</param>
            <returns>Array of channel names</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PubSubNumSub(System.String[])">
             <summary>
            
             </summary>
             <param name="channels">Channel names</param>
             <returns>Array of channel/count tuples</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PubSubNumPat">
             <summary>
            
             </summary>
             <returns>Number of patterns all clients are subscribed to</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PUnsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to unsubscribe</param>
        </member>
        <member name="M:CSRedis.IRedisClient.Subscribe(System.String[])">
            <summary>
            Listen for messages published to the given channels
            </summary>
            <param name="channels">Channels to subscribe</param>
        </member>
        <member name="M:CSRedis.IRedisClient.Unsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to the given channels
            </summary>
            <param name="channels">Channels to unsubscribe</param>
        </member>
        <member name="M:CSRedis.IRedisClient.Eval(System.String,System.String[],System.String[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.EvalSHA(System.String,System.String[],System.String[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ScriptExists(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="scripts">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ScriptFlush">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ScriptKill">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ScriptLoad(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Append(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BitCount(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BitOp(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0);</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Decr(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.DecrBy(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Get(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.GetBit(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.GetSet(System.String,System.Object)">
            <summary>
            Set the string value of a key and
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Incr(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.IncrBy(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.IncrByFloat(System.String,System.Double)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.MGet(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.MSet(System.Tuple{System.String,System.String}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.MSet(System.String[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.MSetNx(System.Tuple{System.String,System.String}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.MSetNx(System.String[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PSetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Set(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Set(System.String,System.Object,System.TimeSpan,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Set(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Set(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off);</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SetNx(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.StrLen(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BgRewriteAof">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.BgSave">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ClientKill(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ClientKill(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">client's ip:port</param>
            <param name="id">client's unique ID</param>
            <param name="type">client type (normal|slave|pubsub);</param>
            <param name="skipMe">do not kill the calling client</param>
            <returns>Nummber of clients killed</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ClientList">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ClientPause(System.Int32)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="milliseconds">Time to pause in milliseconds</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ClientPause(System.TimeSpan)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="timeout">Time to pause</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ClientGetName">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ClientSetName(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces);</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ConfigGet(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ConfigResetStat">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ConfigRewrite">
            <summary>
            Rewrite the redis.conf file the server was started with, applying the minimal changes needed to make it reflect current configuration
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.ConfigSet(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.DbSize">
             <summary>
            
             </summary>
             <returns>Number of keys</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.DebugSegFault">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.FlushAll">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.FlushDb">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Info(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.LastSave">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Monitor">
            <summary>
            Listen for all requests received by the server in real time
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Role">
            <summary>
            Get role information for the current Redis instance
            </summary>
            <returns>RedisMasterRole|RedisSlaveRole|RedisSentinelRole</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Save">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Shutdown(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SlaveOf(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SlaveOfNoOne">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SlowLogGet(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SlowLogLen">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.SlowLogReset">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Sync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Time">
             <summary>
            
             </summary>
             <returns>Server time</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Discard">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Exec">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Multi">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Unwatch">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.Watch(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PfAdd(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PfCount(System.String[])">
             <summary>
            
             </summary>
             <param name="keys">One or more HyperLogLog keys to examine</param>
             <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:CSRedis.IRedisClient.PfMerge(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="T:CSRedis.RedisClient">
            <summary>
            Represents a client connection to a Redis server instance
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String)">
            <summary>
            Create a new RedisClient using default port and encoding
            </summary>
            <param name="host">Redis server hostname</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String,System.Int32)">
            <summary>
            Create a new RedisClient
            </summary>
            <param name="host">Redis server hostname</param>
            <param name="port">Redis server port</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new RedisClient with specific async concurrency settings
            </summary>
            <param name="host">Redis server hostname</param>
            <param name="port">Redis server port</param>
            <param name="asyncConcurrency">Max concurrent threads (default 1000)</param>
            <param name="asyncBufferSize">Async thread buffer size (default 10240 bytes)</param>
        </member>
        <member name="M:CSRedis.RedisClient.StartPipe">
            <summary>
            Begin buffered pipeline mode (calls return immediately; use EndPipe() to execute batch)
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.StartPipeTransaction">
            <summary>
            Begin buffered pipeline mode within the context of a transaction (calls return immediately; use EndPipe() to excute batch)
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.EndPipe">
            <summary>
            Execute pipeline commands
            </summary>
            <returns>Array of batched command results</returns>
        </member>
        <member name="M:CSRedis.RedisClient.StreamTo``1(System.IO.Stream,System.Func{CSRedis.IRedisClient,``0})">
            <summary>
            Stream a BULK reply from the server using default buffer size
            </summary>
            <typeparam name="T">Response type</typeparam>
            <param name="destination">Destination stream</param>
            <param name="func">Client command to execute (BULK reply only)</param>
        </member>
        <member name="M:CSRedis.RedisClient.StreamTo``1(System.IO.Stream,System.Int32,System.Func{CSRedis.IRedisClient,``0})">
            <summary>
            Stream a BULK reply from the server
            </summary>
            <typeparam name="T">Response type</typeparam>
            <param name="destination">Destination stream</param>
            <param name="bufferSize">Size of buffer used to write server response</param>
            <param name="func">Client command to execute (BULK reply only)</param>
        </member>
        <member name="M:CSRedis.RedisClient.Dispose">
            <summary>
            Dispose all resources used by the current RedisClient
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.ConnectAsync">
            <summary>
            Open connection to redis server
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:CSRedis.RedisClient.CallAsync(System.String,System.String[])">
            <summary>
            Call arbitrary redis command
            </summary>
            <param name="command"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.AuthAsync(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Server password</param>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EchoAsync(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Task associated with echo response</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PingAsync">
            <summary>
            Ping the server
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.QuitAsync">
            <summary>
            Close the connection
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SelectAsync(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DelAsync(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.DumpAsync(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExistsAsync(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAsync(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration in seconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second)
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAtAsync(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.KeysAsync(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.MoveAsync(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ObjectEncodingAsync(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ObjectAsync(CSRedis.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PersistAsync(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAsync(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond)
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAtAsync(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PTtlAsync(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RandomKeyAsync">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RenameAsync(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RenameNxAsync(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RestoreAsync(System.String,System.Int64,System.String)">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttl">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.SortAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.TtlAsync(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.TypeAsync(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.HDelAsync(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HExistsAsync(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAsync(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAllAsync``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAllAsync(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrByFloatAsync(System.String,System.String,System.Double)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HKeysAsync(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HLenAsync(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMGetAsync(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSetAsync``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSetAsync(System.String,System.String[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HValsAsync(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LIndexAsync(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LInsertAsync(System.String,CSRedis.RedisInsert,System.String,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LLenAsync(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPopAsync(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPushAsync(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPushXAsync(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPopAsync(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPopLPushAsync(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPushAsync(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPushXAsync(System.String,System.Object[])">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SAddAsync(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SCardAsync(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiffAsync(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInterAsync(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SIsMemberAsync(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMembersAsync(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SPopAsync(System.String)">
            <summary>
            Remove and return a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMemberAsync(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMemberAsync(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnionAsync(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAddAsync``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="memberScores">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAddAsync(System.String,System.String[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="memberScores">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCardAsync(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCountAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZIncrByAsync(System.String,System.Double,System.String)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStoreAsync(System.String,System.Double[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>Array of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRankAsync(System.String,System.String)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRankAsync(System.String,System.String)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScoreAsync(System.String,System.String)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZUnionStoreAsync(System.String,System.Double[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PublishAsync(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubChannelsAsync(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Glob-style channel pattern</param>
            <returns>Active channel names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumSubAsync(System.String[])">
            <summary>
            Return the number of subscribers (not counting clients subscribed to patterns) for the specified channels
            </summary>
            <param name="channels">Channels to query</param>
            <returns>Channel names and counts</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumPatAsync">
            <summary>
            Return the number of subscriptions to patterns
            </summary>
            <returns>The number of patterns all the clients are subscribed to</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EvalAsync(System.String,System.String[],System.String[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EvalSHAAsync(System.String,System.String[],System.String[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptExistsAsync(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="scripts">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptFlushAsync">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptKillAsync">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptLoadAsync(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:CSRedis.RedisClient.AppendAsync(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitCountAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitOpAsync(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0)</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DecrAsync(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DecrByAsync(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetAsync(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetBitAsync(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetSetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key and return its old value
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrAsync(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrByAsync(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrByFloatAsync(System.String,System.Double)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MGetAsync(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetAsync(System.Tuple{System.String,System.String}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetAsync(System.String[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNxAsync(System.Tuple{System.String,System.String}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNxAsync(System.String[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PSetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object,System.TimeSpan,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off)</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetNxAsync(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:CSRedis.RedisClient.StrLenAsync(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgRewriteAofAsync">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgSaveAsync">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientGetNameAsync">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKillAsync(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKillAsync(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">Client address</param>
            <param name="id">Client ID</param>
            <param name="type">Client type</param>
            <param name="skipMe">Set to true to skip calling client</param>
            <returns>The number of clients killed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientListAsync">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPauseAsync(System.Int32)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="milliseconds">Time in milliseconds to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPauseAsync(System.TimeSpan)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="timeout">Time to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientSetNameAsync(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces)</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigGetAsync(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigResetStatAsync">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigRewriteAsync">
            <summary>
            Rewrites the redis.conf file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigSetAsync(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DbSizeAsync">
            <summary>
            Return the number of keys in the selected database
            </summary>
            <returns>Number of keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DebugSegFaultAsync">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushAllAsync">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushDbAsync">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.InfoAsync(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LastSaveAsync">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RoleAsync">
            <summary>
            Provide information on the role of a Redis instance in the context of replication
            </summary>
            <returns>Role information</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SaveAsync">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ShutdownAsync(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOfAsync(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOfNoOneAsync">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogGetAsync(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogLenAsync">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogResetAsync">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SyncAsync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:CSRedis.RedisClient.TimeAsync">
            <summary>
            Return the current server time
            </summary>
            <returns>Server time</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MultiAsync">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DiscardAsync">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExecAsync">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:CSRedis.RedisClient.UnwatchAsync">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.WatchAsync(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfAddAsync(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfCountAsync(System.String[])">
            <summary>
            Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s)
            </summary>
            <param name="keys">One or more HyperLogLog keys to examine</param>
            <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfMergeAsync(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Connect(System.Int32)">
            <summary>
            Connect to the remote host
            </summary>
            <param name="timeout">Connection timeout in milliseconds</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Call(System.String,System.String[])">
            <summary>
            Call arbitrary Redis command
            </summary>
            <param name="command">Command name</param>
            <param name="args">Command arguments</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Auth(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Redis server password</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Echo(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Ping">
            <summary>
            Ping the server
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Quit">
            <summary>
            Close the connection
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Select(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Del(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns>Number of keys removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Dump(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Exists(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns>True if key exists</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Expire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second)</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Expire(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second)
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAt(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">UNIX timestamp</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Keys(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns>Array of keys matching pattern</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Migrate(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeoutMilliseconds">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Migrate(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Move(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns>True if key was moved</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ObjectEncoding(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Object(CSRedis.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Persist(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns>True if timeout was removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond)</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpire(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond)
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAt(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds)</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PTtl(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in milliseconds</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RandomKey">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns>A random key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Rename(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RenameNx(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>True if key was renamed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Restore(System.String,System.Int64,System.String)">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttl">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Sort(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>The sorted list</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>Number of elements stored</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Ttl(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in seconds</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Type(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns>Type of key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the set of keys in the currently selected Redis database
            </summary>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Set the maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HDel(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HExists(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGet(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAll``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAll(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrByFloat(System.String,System.String,System.Double)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HKeys(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HLen(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMGet(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSet(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSet``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSet(System.String,System.String[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSet(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSetNx(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HVals(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the keys and values of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPop(System.Int32,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPop(System.Int32,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List value</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopLPush(System.String,System.String,System.TimeSpan)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LIndex(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LInsert(System.String,CSRedis.RedisInsert,System.String,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LLen(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPop(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPush(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPushX(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRem(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LSet(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPop(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPopLPush(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPush(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPushX(System.String,System.Object[])">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SAdd(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SCard(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiff(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiffStore(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInter(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SIsMember(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMembers(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMove(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SPop(System.String)">
            <summary>
            Remove and return a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMember(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMember(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnion(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the elements of a set field
            </summary>
            <param name="key">Set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAdd``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="memberScores">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAdd(System.String,System.String[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="memberScores">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCard(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCount(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCount(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZIncrBy(System.String,System.Double,System.String)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStore(System.String,System.Double[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRange(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>Array of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScores(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRank(System.String,System.String)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRange(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScores(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRank(System.String,System.String)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScore(System.String,System.String)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZUnionStore(System.String,System.Double[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZLexCount(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PSubscribe(System.String[])">
            <summary>
            Listen for messages published to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to subscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Publish(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubChannels(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Return only channels matching this pattern</param>
            <returns>Array of channel names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumSub(System.String[])">
            <summary>
            Return the number of subscribers for the specified channels
            </summary>
            <param name="channels">Channel names</param>
            <returns>Array of channel/count tuples</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumPat">
            <summary>
            Return the number of subscriptions to patterns
            </summary>
            <returns>Number of patterns all clients are subscribed to</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PUnsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to unsubscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Subscribe(System.String[])">
            <summary>
            Listen for messages published to the given channels
            </summary>
            <param name="channels">Channels to subscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Unsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to the given channels
            </summary>
            <param name="channels">Channels to unsubscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Eval(System.String,System.String[],System.String[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EvalSHA(System.String,System.String[],System.String[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptExists(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="scripts">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptFlush">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptKill">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptLoad(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Append(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitCount(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitOp(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0)</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Decr(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DecrBy(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Get(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetBit(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetSet(System.String,System.Object)">
            <summary>
            Set the string value of a key and return its old value
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Incr(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrBy(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrByFloat(System.String,System.Double)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MGet(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSet(System.Tuple{System.String,System.String}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSet(System.String[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNx(System.Tuple{System.String,System.String}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNx(System.String[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PSetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object,System.TimeSpan,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off)</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetNx(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:CSRedis.RedisClient.StrLen(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgRewriteAof">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgSave">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKill(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKill(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">client's ip:port</param>
            <param name="id">client's unique ID</param>
            <param name="type">client type (normal|slave|pubsub)</param>
            <param name="skipMe">do not kill the calling client</param>
            <returns>Nummber of clients killed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientList">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPause(System.Int32)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="milliseconds">Time to pause in milliseconds</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPause(System.TimeSpan)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="timeout">Time to pause</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientGetName">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientSetName(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces)</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigGet(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigResetStat">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigRewrite">
            <summary>
            Rewrite the redis.conf file the server was started with, applying the minimal changes needed to make it reflect current configuration
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigSet(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DbSize">
            <summary>
            Return the number of keys in the selected database
            </summary>
            <returns>Number of keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DebugSegFault">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushAll">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushDb">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Info(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LastSave">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Monitor">
            <summary>
            Listen for all requests received by the server in real time
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Role">
            <summary>
            Get role information for the current Redis instance
            </summary>
            <returns>RedisMasterRole|RedisSlaveRole|RedisSentinelRole</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Save">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Shutdown(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOf(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOfNoOne">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogGet(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogLen">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogReset">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Sync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Time">
            <summary>
            Return the current server time
            </summary>
            <returns>Server time</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Discard">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Exec">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Multi">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Unwatch">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Watch(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfAdd(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfCount(System.String[])">
            <summary>
            Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s)
            </summary>
            <param name="keys">One or more HyperLogLog keys to examine</param>
            <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfMerge(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="E:CSRedis.RedisClient.SubscriptionReceived">
            <summary>
            Occurs when a subscription message is received
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.SubscriptionChanged">
            <summary>
            Occurs when a subscription channel is added or removed
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.TransactionQueued">
            <summary>
            Occurs when a transaction command is acknowledged by the server
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.MonitorReceived">
            <summary>
            Occurs when a monitor message is received
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.Connected">
            <summary>
            Occurs when the connection has sucessfully reconnected
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.Host">
            <summary>
            Get the Redis server hostname
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.Port">
            <summary>
            Get the Redis server port
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.IsConnected">
            <summary>
            Get a value indicating whether the Redis client is connected to the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.Encoding">
            <summary>
            Get or set the string encoding used to communicate with the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.ReceiveTimeout">
            <summary>
            Get or set the connection read timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.SendTimeout">
            <summary>
            Get or set the connection send timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.ReconnectAttempts">
            <summary>
            Get or set the number of times to attempt a reconnect after a connection fails
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.ReconnectWait">
            <summary>
            Get or set the amount of time (milliseconds) to wait between reconnect attempts
            </summary>
        </member>
        <member name="T:CSRedis.RedisSentinelClient">
            <summary>
            Represents a client connection to a Redis sentinel instance
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.#ctor(System.String)">
            <summary>
            Create a new RedisSentinelClient using default port and encoding
            </summary>
            <param name="host">Redis sentinel hostname</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.#ctor(System.String,System.Int32)">
            <summary>
            Create a new RedisSentinelClient using default encoding
            </summary>
            <param name="host">Redis sentinel hostname</param>
            <param name="port">Redis sentinel port</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Dispose">
            <summary>
            Release resoures used by the current RedisSentinelClient
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.ConnectAsync">
            <summary>
            Connect to the remote host
            </summary>
            <returns>True if connected</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.CallAsync(System.String,System.String[])">
            <summary>
            Call arbitrary Sentinel command (e.g. for a command not yet implemented in this library)
            </summary>
            <param name="command">The name of the command</param>
            <param name="args">Array of arguments to the command</param>
            <returns>Redis unified response</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.PingAsync">
            <summary>
            Ping the Sentinel server
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.MastersAsync">
            <summary>
            Get a list of monitored Redis masters
            </summary>
            <returns>Redis master info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.MasterAsync(System.String)">
            <summary>
            Get information on the specified Redis master
            </summary>
            <param name="masterName">Name of the Redis master</param>
            <returns>Master information</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.SentinelsAsync(System.String)">
            <summary>
            Get a list of other Sentinels known to the current Sentinel
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Sentinel hosts and ports</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.SlavesAsync(System.String)">
            <summary>
            Get a list of monitored Redis slaves to the given master 
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Redis slave info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.GetMasterAddrByNameAsync(System.String)">
            <summary>
            Get the IP and port of the current master Redis server
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>IP and port of master Redis server</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.IsMasterDownByAddrAsync(System.String,System.Int32,System.Int64,System.String)">
            <summary>
            Get master state information
            </summary>
            <param name="ip">Host IP</param>
            <param name="port">Host port</param>
            <param name="currentEpoch">Current epoch</param>
            <param name="runId">Run ID</param>
            <returns>Master state</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.ResetAsync(System.String)">
            <summary>
            Clear state in all masters with matching name
            </summary>
            <param name="pattern">Master name pattern</param>
            <returns>Number of masters that were reset</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.FailoverAsync(System.String)">
            <summary>
            Force a failover as if the master was not reachable, and without asking for agreement from other sentinels
            </summary>
            <param name="masterName">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.MonitorAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Start monitoring a new master
            </summary>
            <param name="name">Master name</param>
            <param name="port">Master port</param>
            <param name="quorum">Quorum count</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.RemoveAsync(System.String)">
            <summary>
            Remove the specified master
            </summary>
            <param name="name">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.SetAsync(System.String,System.String,System.String)">
            <summary>
            Change configuration parameters of a specific master
            </summary>
            <param name="masterName">Master name</param>
            <param name="option">Config option name</param>
            <param name="value">Config option value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Connect(System.Int32)">
            <summary>
            Connect to the remote host
            </summary>
            <param name="timeout">Connection timeout in milliseconds</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Call(System.String,System.String[])">
            <summary>
            Call arbitrary Sentinel command (e.g. for a command not yet implemented in this library)
            </summary>
            <param name="command">The name of the command</param>
            <param name="args">Array of arguments to the command</param>
            <returns>Redis unified response</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Ping">
            <summary>
            Ping the Sentinel server
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Masters">
            <summary>
            Get a list of monitored Redis masters
            </summary>
            <returns>Redis master info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Master(System.String)">
            <summary>
            Get information on the specified Redis master
            </summary>
            <param name="masterName">Name of the Redis master</param>
            <returns>Master information</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Sentinels(System.String)">
            <summary>
            Get a list of other Sentinels known to the current Sentinel
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Sentinel hosts and ports</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Slaves(System.String)">
            <summary>
            Get a list of monitored Redis slaves to the given master 
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Redis slave info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.GetMasterAddrByName(System.String)">
            <summary>
            Get the IP and port of the current master Redis server
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>IP and port of master Redis server</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Subscribe(System.String[])">
            <summary>
            Open one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channels">Name of channels to open (refer to http://redis.io/ for channel names)</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Unsubscribe(System.String[])">
            <summary>
            Close one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channels">Name of channels to close</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.PSubscribe(System.String[])">
            <summary>
            Open one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channelPatterns">Pattern of channels to open (refer to http://redis.io/ for channel names)</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.PUnsubscribe(System.String[])">
            <summary>
            Close one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channelPatterns">Pattern of channels to close</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.IsMasterDownByAddr(System.String,System.Int32,System.Int64,System.String)">
            <summary>
            Get master state information
            </summary>
            <param name="ip">Host IP</param>
            <param name="port">Host port</param>
            <param name="currentEpoch">Current epoch</param>
            <param name="runId">Run ID</param>
            <returns>Master state</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Reset(System.String)">
            <summary>
            Clear state in all masters with matching name
            </summary>
            <param name="pattern">Master name pattern</param>
            <returns>Number of masters that were reset</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Failover(System.String)">
            <summary>
            Force a failover as if the master was not reachable, and without asking for agreement from other sentinels
            </summary>
            <param name="masterName">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Monitor(System.String,System.Int32,System.Int32)">
            <summary>
            Start monitoring a new master
            </summary>
            <param name="name">Master name</param>
            <param name="port">Master port</param>
            <param name="quorum">Quorum count</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Remove(System.String)">
            <summary>
            Remove the specified master
            </summary>
            <param name="name">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Set(System.String,System.String,System.String)">
            <summary>
            Change configuration parameters of a specific master
            </summary>
            <param name="masterName">Master name</param>
            <param name="option">Config option name</param>
            <param name="value">Config option value</param>
            <returns>Status code</returns>
        </member>
        <member name="E:CSRedis.RedisSentinelClient.SubscriptionReceived">
            <summary>
            Occurs when a subscription message is received
            </summary>
        </member>
        <member name="E:CSRedis.RedisSentinelClient.SubscriptionChanged">
            <summary>
            Occurs when a subscription channel is added or removed
            </summary>
        </member>
        <member name="E:CSRedis.RedisSentinelClient.Reconnected">
            <summary>
            Occurs when the connection has sucessfully reconnected
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Host">
            <summary>
            Get the Redis sentinel hostname
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Port">
            <summary>
            Get the Redis sentinel port
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Connected">
            <summary>
            Get a value indicating whether the Redis sentinel client is connected to the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Encoding">
            <summary>
            Get the string encoding used to communicate with the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.ReceiveTimeout">
            <summary>
            Get or set the connection read timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.SendTimeout">
            <summary>
            Get or set the connection send timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.ReconnectAttempts">
            <summary>
            Get or set the number of times to attempt a reconnect after a connection fails
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.ReconnectWait">
            <summary>
            Get or set the amount of time to wait between reconnect attempts
            </summary>
        </member>
        <member name="T:CSRedis.RedisSentinelManager">
            <summary>
            Represents a managed connection to a Redis master instance via a set of Redis sentinel nodes
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.#ctor(System.String[])">
            <summary>
            Create a new RedisSentinenlManager
            </summary>
            <param name="sentinels">Sentinel addresses (host:ip)</param>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.Add(System.String)">
            <summary>
            Add a new sentinel host using default port
            </summary>
            <param name="host">Sentinel hostname</param>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.Add(System.String,System.Int32)">
            <summary>
            Add a new sentinel host
            </summary>
            <param name="host">Sentinel hostname</param>
            <param name="port">Sentinel port</param>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.Connect(System.String,System.Int32)">
            <summary>
            Obtain connection to the specified master node
            </summary>
            <param name="masterName">Name of Redis master</param>
            <param name="timeout">Connection timeout (milliseconds)</param>
            <returns>host:port of Sentinel server that responded</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.Call``1(System.Func{CSRedis.RedisClient,``0})">
            <summary>
            Execute command against the master, reconnecting if necessary
            </summary>
            <typeparam name="T">Command return type</typeparam>
            <param name="redisAction">Command to execute</param>
            <returns>Command result</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.Dispose">
            <summary>
            Release resources held by the current RedisSentinelManager
            </summary>
        </member>
        <member name="E:CSRedis.RedisSentinelManager.Connected">
            <summary>
            Occurs when the master connection has sucessfully connected
            </summary>
        </member>
        <member name="T:CSRedis.RedisObjectSubCommand">
            <summary>
            Sub-command used by Redis OBJECT command
            </summary>
        </member>
        <member name="F:CSRedis.RedisObjectSubCommand.RefCount">
            <summary>
            Return the number of references of the value associated with the specified key
            </summary>
        </member>
        <member name="F:CSRedis.RedisObjectSubCommand.IdleTime">
            <summary>
            Return the number of seconds since the object stored at the specified key is idle
            </summary>
        </member>
        <member name="T:CSRedis.RedisSortDir">
            <summary>
            Sort direction used by Redis SORT command
            </summary>
        </member>
        <member name="F:CSRedis.RedisSortDir.Asc">
            <summary>
            Sort ascending (a-z)
            </summary>
        </member>
        <member name="F:CSRedis.RedisSortDir.Desc">
            <summary>
            Sort descending (z-a)
            </summary>
        </member>
        <member name="T:CSRedis.RedisInsert">
            <summary>
            Insert position used by Redis LINSERT command
            </summary>
        </member>
        <member name="F:CSRedis.RedisInsert.Before">
            <summary>
            Insert before pivot element
            </summary>
        </member>
        <member name="F:CSRedis.RedisInsert.After">
            <summary>
            Insert after pivot element
            </summary>
        </member>
        <member name="T:CSRedis.RedisBitOp">
            <summary>
            Operation used by Redis BITOP command
            </summary>
        </member>
        <member name="F:CSRedis.RedisBitOp.And">
            <summary>
            Bitwise AND
            </summary>
        </member>
        <member name="F:CSRedis.RedisBitOp.Or">
            <summary>
            Bitwise OR
            </summary>
        </member>
        <member name="F:CSRedis.RedisBitOp.XOr">
            <summary>
            Bitwise EXCLUSIVE-OR
            </summary>
        </member>
        <member name="F:CSRedis.RedisBitOp.Not">
            <summary>
            Bitwise NOT
            </summary>
        </member>
        <member name="T:CSRedis.RedisAggregate">
            <summary>
            Aggregation function used by Reids set operations
            </summary>
        </member>
        <member name="F:CSRedis.RedisAggregate.Sum">
            <summary>
            Aggregate SUM
            </summary>
        </member>
        <member name="F:CSRedis.RedisAggregate.Min">
            <summary>
            Aggregate MIN
            </summary>
        </member>
        <member name="F:CSRedis.RedisAggregate.Max">
            <summary>
            Aggregate MAX
            </summary>
        </member>
        <member name="T:CSRedis.RedisMessage">
            <summary>
            Redis unified message prefix
            </summary>
        </member>
        <member name="F:CSRedis.RedisMessage.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:CSRedis.RedisMessage.Status">
            <summary>
            Status message
            </summary>
        </member>
        <member name="F:CSRedis.RedisMessage.Bulk">
            <summary>
            Bulk message
            </summary>
        </member>
        <member name="F:CSRedis.RedisMessage.MultiBulk">
            <summary>
            Multi bulk message
            </summary>
        </member>
        <member name="F:CSRedis.RedisMessage.Int">
            <summary>
            Int message
            </summary>
        </member>
        <member name="T:CSRedis.RedisSubscriptionResponseType">
            <summary>
            Redis subscription response type
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.Subscribe">
            <summary>
            Channel subscribed
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.Message">
            <summary>
            Message published
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.Unsubscribe">
            <summary>
            Channel unsubscribed
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.PSubscribe">
            <summary>
            Channel pattern subscribed
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.PMessage">
            <summary>
            Message published to channel pattern
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.PUnsubscribe">
            <summary>
            Channel pattern unsubsribed
            </summary>
        </member>
        <member name="T:CSRedis.RedisExistence">
            <summary>
            Redis existence specification for SET command
            </summary>
        </member>
        <member name="F:CSRedis.RedisExistence.Nx">
            <summary>
            Only set the key if it does not already exist
            </summary>
        </member>
        <member name="F:CSRedis.RedisExistence.Xx">
            <summary>
            Only set the key if it already exists
            </summary>
        </member>
        <member name="T:CSRedis.RedisRole">
            <summary>
            Base class for Redis role information
            </summary>
        </member>
        <member name="P:CSRedis.RedisRole.RoleName">
            <summary>
            Get the role type
            </summary>
        </member>
        <member name="T:CSRedis.RedisMasterRole">
            <summary>
            Represents information on the Redis master role
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterRole.ReplicationOffset">
            <summary>
            Get the master replication offset
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterRole.Slaves">
            <summary>
            Get the slaves associated with the current master
            </summary>
        </member>
        <member name="T:CSRedis.RedisSlaveRole">
            <summary>
            Represents information on the Redis slave role
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveRole.MasterIp">
            <summary>
            Get the IP address of the master node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveRole.MasterPort">
            <summary>
            Get the port of the master node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveRole.ReplicationState">
            <summary>
            Get the replication state
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveRole.DataReceived">
            <summary>
            Get the number of bytes received
            </summary>
        </member>
        <member name="T:CSRedis.RedisSentinelRole">
            <summary>
            Represents information on the Redis sentinel role
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelRole.Masters">
            <summary>
            Get the masters known to the current Sentinel
            </summary>
        </member>
        <member name="T:CSRedis.RedisScan`1">
            <summary>
            Represents the result of a Redis SCAN or SSCAN operation
            </summary>
        </member>
        <member name="P:CSRedis.RedisScan`1.Cursor">
            <summary>
            Updated cursor that should be used as the cursor argument in the next call
            </summary>
        </member>
        <member name="P:CSRedis.RedisScan`1.Items">
            <summary>
            Collection of elements returned by the SCAN operation
            </summary>
        </member>
        <member name="T:CSRedis.RedisSubscriptionResponse">
            <summary>
            Represents a Redis subscription response
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionResponse.Channel">
            <summary>
            Get the subscription channel name
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionResponse.Pattern">
            <summary>
            Get the subscription pattern
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionResponse.Type">
            <summary>
            Get the message type
            </summary>
        </member>
        <member name="T:CSRedis.RedisSubscriptionChannel">
            <summary>
            Represents a Redis subscription channel
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionChannel.Count">
            <summary>
            Get the count of active subscriptions
            </summary>
        </member>
        <member name="T:CSRedis.RedisSubscriptionMessage">
            <summary>
            Represents a Redis subscription message
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionMessage.Body">
            <summary>
            Get the subscription message
            </summary>
        </member>
        <member name="T:CSRedis.RedisServerInfo">
            <summary>
            Base class for Redis server-info objects reported by Sentinel
            </summary>
        </member>
        <member name="M:CSRedis.RedisServerInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisServerInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:CSRedis.RedisServerInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Not implemented
            </summary>
            <param name="info">info</param>
            <param name="context">info</param>
        </member>
        <member name="P:CSRedis.RedisServerInfo.Name">
            <summary>
            Get or set Redis server name
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.Ip">
            <summary>
            Get or set Redis server IP
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.Port">
            <summary>
            Get or set Redis server port
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.RunId">
            <summary>
            Get or set Redis server run ID
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.Flags">
            <summary>
            Get or set Redis server flags
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.PendingCommands">
            <summary>
            Get or set number of pending Redis server commands
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.LastPingSent">
            <summary>
            Get or set last ping sent
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.LastOkPingReply">
            <summary>
            Get or set milliseconds since last successful ping reply
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.LastPingReply">
            <summary>
            Get or set milliseconds since last ping reply
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.DownAfterMilliseconds">
            <summary>
            Get or set down after milliseconds
            </summary>
        </member>
        <member name="T:CSRedis.RedisMasterSlaveInfo">
            <summary>
            Base class for Redis master/slave objects reported by Sentinel
            </summary>
        </member>
        <member name="M:CSRedis.RedisMasterSlaveInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisMasterSlaveInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:CSRedis.RedisMasterSlaveInfo.InfoRefresh">
            <summary>
            Get or set info refresh
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterSlaveInfo.RoleReported">
            <summary>
            Get or set role reported
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterSlaveInfo.RoleReportedTime">
            <summary>
            Get or set role reported time
            </summary>
        </member>
        <member name="T:CSRedis.RedisMasterInfo">
            <summary>
            Represents a Redis master node as reported by a Redis Sentinel
            </summary>
        </member>
        <member name="M:CSRedis.RedisMasterInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisMasterInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.ConfigEpoch">
            <summary>
            Get or set the config epoch
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.NumSlaves">
            <summary>
            Get or set number of slaves of the current master node
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.NumOtherSentinels">
            <summary>
            Get or set number of other Sentinels
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.Quorum">
            <summary>
            Get or set Sentinel quorum count
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.FailoverTimeout">
            <summary>
            Get or set the failover timeout
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.ParallelSyncs">
            <summary>
            Get or set the parallel syncs
            </summary>
        </member>
        <member name="T:CSRedis.RedisSlaveInfo">
            <summary>
            Represents a Redis slave node as reported by a Redis Setinel
            </summary>
        </member>
        <member name="M:CSRedis.RedisSlaveInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisSlaveInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.MasterLinkDownTime">
            <summary>
            Get or set the master link down time
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.MasterLinkStatus">
            <summary>
            Get or set status of master link
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.MasterHost">
            <summary>
            Get or set the master host of the current Redis slave node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.MasterPort">
            <summary>
            Get or set the master port of the current Redis slave node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.SlavePriority">
            <summary>
            Get or set the priority of the current Redis slave node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.SlaveReplOffset">
            <summary>
            Get or set the slave replication offset
            </summary>
        </member>
        <member name="T:CSRedis.RedisSentinelInfo">
            <summary>
            Represents a Redis Sentinel node as reported by a Redis Sentinel
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisSentinelInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:CSRedis.RedisSentinelInfo.SDownTime">
            <summary>
            Get or set the subjective down time
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelInfo.LastHelloMessage">
            <summary>
            Get or set milliseconds(?) since last hello message from current Sentinel node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelInfo.VotedLeader">
            <summary>
            Get or set the voted-leader value
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelInfo.VotedLeaderEpoch">
            <summary>
            Get or set the voted-leader epoch
            </summary>
        </member>
        <member name="T:CSRedis.RedisSlowLogEntry">
            <summary>
            Represents an entry from the Redis slow log
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlowLogEntry.Id">
            <summary>
            Get the entry ID
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlowLogEntry.Date">
            <summary>
            Get the entry date
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlowLogEntry.Latency">
            <summary>
            Get the entry latency
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlowLogEntry.Arguments">
            <summary>
            Get the entry arguments
            </summary>
        </member>
        <member name="T:CSRedis.RedisMasterState">
            <summary>
            Represents state as reported by Sentinel
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterState.DownState">
            <summary>
            Get the master down state
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterState.Leader">
            <summary>
            Get the leader
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterState.VoteEpoch">
            <summary>
            Get the vote epoch
            </summary>
        </member>
    </members>
</doc>
